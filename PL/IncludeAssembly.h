#pragma once
#include <Windows.h>
#include <iostream>
#include <cstring>
#include "Memory.h"
#include <Windows.h>
#include <iostream>
#include <cstring>
#include "GetModule.h"
#include "Preset.h"
#include "OffsetAddress.h"
#include "VMProtectUltra.h"
#pragma comment(lib, "VMProtectSDK64.lib")

using namespace std;

class UseAssembly
{
public:
	BOOL USEAs = false;

	/*MainFunction*/
	DWORD64	EntityAlloc, MainFunction_Filter, MainFunction_StartUp, Fov_Aimbot, Fov_Trigger;

	/*MainFunction_BoneSkinID_Function*/
	DWORD64 MainFunction_BoneSkin_Function, MainFunction_BoneSkin_SkinID;


	/*DotProduct*/
	DWORD64 MainFunction_Product_Function;
	DWORD64 Vector3_Height_Multiple, DistanceCheck, DirectDistance, Vector3_Height, VectorCheck, Vector_Result;

	/*Prediction */
	DWORD64 PredictionAlloc, MainFunction_Prediction_Function;
	DWORD64 Vector3_Prev, MainFunction_Velocity, MainFunction_Velocity_Check, MainFunction_Prediction_SwitchDistance, MainFunction_Prediction_Aim;
	DWORD64 Vector3_Fut;
	DWORD64 Prediction_Switch;

	/*SaveFunction*/
	DWORD64 MainFunction_SavePos_Function, IncCount;

	/*MouseFunction*/
	DWORD64 AngleAlloc, MouseFunction_MouseAddr, MouseClickCheck, MouseFunction_Filter, MouseFunction_Y_Axis;

	/*Humanize Function*/
	DWORD64 HumanizeAlloc, Vector_Result2, HumanizeScore;

	/*GUID*/
	DWORD64 GUIDAlloc, GetGUID;

	/*BorderLine*/
	DWORD64 GlowAlloc, GlowThickness, GlowShadow, BorderLineFunction_Switch;

	void Shangus()
	{
		VMProtectBeginUltra("Shangus");
		/*MainFunction Alloc*/
		EntityAlloc = (DWORD64)VirtualAlloc(NULL, 0x200, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
		MainFunction_Filter = (DWORD64)VirtualAlloc(NULL, 0x20, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
		Fov_Aimbot = (DWORD64)VirtualAlloc(NULL, 0x8, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
		Fov_Trigger = (DWORD64)VirtualAlloc(NULL, 0x8, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
		MainFunction_StartUp = (DWORD64)VirtualAlloc(NULL, 0x8, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);

		/*BoneSkin_Function Alloc*/
		MainFunction_BoneSkin_Function = (DWORD64)VirtualAlloc(NULL, 0x2000, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
		MainFunction_BoneSkin_SkinID = (DWORD64)VirtualAlloc(NULL, 0x20, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);

		/*Prediction Alloc*/
		PredictionAlloc = (DWORD64)VirtualAlloc(NULL, 0x200, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
		MainFunction_Prediction_Function = (DWORD64)VirtualAlloc(NULL, 0x200, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
		DistanceCheck = (DWORD64)VirtualAlloc(NULL, 0x20, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
		DirectDistance = (DWORD64)VirtualAlloc(NULL, 0x20, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
		Vector3_Fut = (DWORD64)VirtualAlloc(NULL, 0x20, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
		VectorCheck = (DWORD64)VirtualAlloc(NULL, 0x20, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
		MainFunction_Velocity = (DWORD64)VirtualAlloc(NULL, 0x20, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
		MainFunction_Velocity_Check = (DWORD64)VirtualAlloc(NULL, 0x20, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
		MainFunction_Prediction_SwitchDistance = (DWORD64)VirtualAlloc(NULL, 0x20, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
		MainFunction_Prediction_Aim = (DWORD64)VirtualAlloc(NULL, 0x20, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
		Prediction_Switch = (DWORD64)VirtualAlloc(NULL, 0x8, MEM_COMMIT, PAGE_EXECUTE_READWRITE);

		/*DotProduct Alloc*/
		MainFunction_Product_Function = (DWORD64)VirtualAlloc(NULL, 0x200, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
		Vector3_Height = (DWORD64)VirtualAlloc(NULL, 0x20, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
		Vector3_Height_Multiple = (DWORD64)VirtualAlloc(NULL, 0x20, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
		Vector_Result = (DWORD64)VirtualAlloc(NULL, 0x20, MEM_COMMIT, PAGE_EXECUTE_READWRITE);

		/*Humanize Alloc*/
		HumanizeAlloc = (DWORD64)VirtualAlloc(NULL, 0x200, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
		Vector_Result2 = (DWORD64)VirtualAlloc(NULL, 0x20, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
		HumanizeScore = (DWORD64)VirtualAlloc(NULL, 0x20, MEM_COMMIT, PAGE_EXECUTE_READWRITE);

		/*SaveFunction Alloc*/
		MainFunction_SavePos_Function = (DWORD64)VirtualAlloc(NULL, 0x200, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
		Vector3_Prev = (DWORD64)VirtualAlloc(NULL, 0x20, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
		IncCount = (DWORD64)VirtualAlloc(NULL, 0x8, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);

		/* MouseFunction -> MainFunction*/
		AngleAlloc = (DWORD64)VirtualAlloc(NULL, 0x200, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
		MouseFunction_MouseAddr = (DWORD64)VirtualAlloc(NULL, 0x8, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
		MouseFunction_Filter = (DWORD64)VirtualAlloc(NULL, 0x20, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
		MouseFunction_Y_Axis = (DWORD64)VirtualAlloc(NULL, 0x8, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
		MouseClickCheck = (DWORD64)VirtualAlloc(NULL, 0x8, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);

		BYTE MainFunction_Script[] =
		{
			0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x48, 0x83, 0xEC, 0x30, 0x0F, 0x11, 0x04, 0x24, 0x0F, 0x11, 0x4C, 0x24, 0x10, 0x0F, 0x11, 0x54, 0x24, 0x20, 0x56, 0x48, 0x8B, 0x74, 0x24, 0x38, 0x81, 0x7E, 0xE0, 0xA5, 0x48, 0x8B, 0x8B, 0x0F, 0x85, 0xB0, 0x00, 0x00, 0x00, 0x0F, 0x2F, 0x3D, 0xCC, 0x27, 0x00, 0x00, 0x0F, 0x85, 0xA3, 0x00, 0x00, 0x00, 0x48, 0x8B, 0xB4, 0x24, 0xA0, 0x08, 0x00, 0x00, 0x80, 0xBE, 0x88, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x8E, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x35, 0xBA, 0x2E, 0x00, 0x00, 0x81, 0xBE, 0xFC, 0x03, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3C, 0x77, 0x7B, 0x90, 0x90, 0x90, 0x90, 0x80, 0xBE, 0xCE, 0xF9, 0xFF, 0xFF, 0xB6, 0x74, 0x6E, 0x90, 0x90, 0x90, 0x90, 0x66, 0x81, 0xBE, 0xB2, 0xF9, 0xFF, 0xFF, 0x4C, 0x01, 0x74, 0x5F, 0x90, 0x90, 0x90, 0x90, 0x66, 0x81, 0xBE, 0xB8, 0xF9, 0xFF, 0xFF, 0x4D, 0x01, 0x74, 0x50, 0x90, 0x90, 0x90, 0x90, 0x80, 0xBE, 0xB2, 0xF9, 0xFF, 0xFF, 0x0D, 0x74, 0x43, 0x90, 0x90, 0x90, 0x90, 0x66, 0x81, 0xBE, 0xCE, 0xF9, 0xFF, 0xFF, 0x7D, 0x01, 0x74, 0x34, 0x90, 0x90, 0x90, 0x90, 0x80, 0xBE, 0xB6, 0xF9, 0xFF, 0xFF, 0x33, 0x74, 0x27, 0x90, 0x90, 0x90, 0x90, 0x80, 0xBE, 0xB4, 0xF9, 0xFF, 0xFF, 0x04, 0x74, 0x1A, 0x90, 0x90, 0x90, 0x90, 0x48, 0x31, 0xF6, 0xF3, 0x0F, 0x10, 0x44, 0x24, 0x40, 0x0F, 0x2F, 0x05, 0x49, 0x27, 0x00, 0x00, 0x72, 0x18, 0x90, 0x90, 0x90, 0x90, 0x5E, 0x0F, 0x10, 0x04, 0x24, 0x0F, 0x10, 0x4C, 0x24, 0x10, 0x0F, 0x10, 0x54, 0x24, 0x20, 0x48, 0x83, 0xC4, 0x30, 0xC3, 0xE8, 0x0A, 0x07, 0x00, 0x00, 0xC6, 0x05, 0x23, 0x28, 0x00, 0x00, 0x01, 0xE8, 0xFE, 0x00, 0x00, 0x00, 0xE8, 0xF9, 0x02, 0x00, 0x00, 0xE8, 0xF4, 0x04, 0x00, 0x00, 0xF3, 0x0F, 0x10, 0x4C, 0x24, 0x40, 0x0F, 0x2F, 0x0D, 0x27, 0x27, 0x00, 0x00, 0x77, 0xC2, 0x80, 0x3D, 0x4E, 0x29, 0x00, 0x00, 0x00, 0x74, 0xB9, 0x48, 0x8B, 0x35, 0xE5, 0x2D, 0x00, 0x00, 0xC6, 0x86, 0x62, 0xFF, 0xFF, 0xFF, 0x01, 0xC6, 0x46, 0x82, 0x01, 0xEB, 0xA5
		};
		*(DWORD*)(MainFunction_Script + 0x30) = (DWORD)(MainFunction_Filter - (EntityAlloc + 0x30) - 4);
		*(DWORD*)(MainFunction_Script + 0x4A + 0x8) = (DWORD)(MouseFunction_MouseAddr - (EntityAlloc + 0x4A + 0x8) - 4);
		*(DWORD*)(MainFunction_Script + 0xD3) = (DWORD)(Fov_Aimbot - (EntityAlloc + 0xD3) - 4);
		*(DWORD*)(MainFunction_Script + 0xF2) = (DWORD)(MainFunction_BoneSkin_Function - (EntityAlloc + 0xF2) - 4);//Bone Skin 
		*(DWORD*)(MainFunction_Script + 0xF8) = (DWORD)(MainFunction_StartUp - (EntityAlloc + 0xF8) - 5);
		*(DWORD*)(MainFunction_Script + 0xFE) = (DWORD)(MainFunction_Prediction_Function - (EntityAlloc + 0xFE) - 4);//Prediction 
		*(DWORD*)(MainFunction_Script + 0x103) = (DWORD)(MainFunction_Product_Function - (EntityAlloc + 0x103) - 4);//Product 
		*(DWORD*)(MainFunction_Script + 0x108) = (DWORD)(MainFunction_SavePos_Function - (EntityAlloc + 0x108) - 4);//ÀÌÀüÁÂÇ¥
		*(DWORD*)(MainFunction_Script + 0x115) = (DWORD)(Fov_Trigger - (EntityAlloc + 0x115) - 4);
		*(DWORD*)(MainFunction_Script + 0x11D) = (DWORD)(MouseClickCheck - (EntityAlloc + 0x11D) - 5); // 
		*(DWORD*)(MainFunction_Script + 0x127) = (DWORD)(MouseFunction_MouseAddr - (EntityAlloc + 0x127) - 4);

		WriteProcessMemory(MODULE->hProcess, LPVOID(EntityAlloc), MainFunction_Script, sizeof(MainFunction_Script), NULL);


		BYTE Prediction_Script[] =
		{
			0x0F, 0x10, 0x8C, 0x24, 0xA8, 0x03, 0x00, 0x00, 0x0F, 0x10, 0x94, 0x24, 0x08, 0x03, 0x00, 0x00, 0x0F, 0x5C, 0xCA, 0x0F, 0x59, 0xC9, 0x0F, 0x11, 0x0D, 0xA3, 0x06, 0x00, 0x00, 0xF3, 0x0F, 0x10, 0x0D, 0x9B, 0x06, 0x00, 0x00, 0xF3, 0x0F, 0x58, 0x0D, 0x97, 0x06, 0x00, 0x00, 0xF3, 0x0F, 0x58, 0x0D, 0x93, 0x06, 0x00, 0x00, 0xF3, 0x0F, 0x11, 0x0D, 0x83, 0x06, 0x00, 0x00, 0xF3, 0x0F, 0x11, 0x0D, 0x7F, 0x06, 0x00, 0x00, 0xF3, 0x0F, 0x11, 0x0D, 0x7B, 0x06, 0x00, 0x00, 0x0F, 0x10, 0x0D, 0x6C, 0x06, 0x00, 0x00, 0xF3, 0x0F, 0x51, 0xC9, 0xF3, 0x0F, 0x11, 0x0D, 0x40, 0x06, 0x00, 0x00, 0x80, 0x3D, 0x29, 0x07, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x9E, 0x00, 0x00, 0x00, 0x0F, 0x10, 0x84, 0x24, 0x08, 0x03, 0x00, 0x00, 0x0F, 0x10, 0x0D, 0xF4, 0x06, 0x00, 0x00, 0x0F, 0x5C, 0xC1, 0x0F, 0x10, 0xC8, 0x0F, 0x59, 0xC9, 0x0F, 0x11, 0x0D, 0x34, 0x06, 0x00, 0x00, 0xF3, 0x0F, 0x10, 0x0D, 0x2C, 0x06, 0x00, 0x00, 0xF3, 0x0F, 0x58, 0x0D, 0x28, 0x06, 0x00, 0x00, 0xF3, 0x0F, 0x58, 0x0D, 0x24, 0x06, 0x00, 0x00, 0xF3, 0x0F, 0x11, 0x0D, 0x14, 0x06, 0x00, 0x00, 0xF3, 0x0F, 0x11, 0x0D, 0x10, 0x06, 0x00, 0x00, 0xF3, 0x0F, 0x11, 0x0D, 0x0C, 0x06, 0x00, 0x00, 0x0F, 0x10, 0x0D, 0xFD, 0x05, 0x00, 0x00, 0xF3, 0x0F, 0x51, 0xC9, 0xF3, 0x0F, 0x11, 0x0D, 0x51, 0x07, 0x00, 0x00, 0x0F, 0x2F, 0x0D, 0xEA, 0x06, 0x00, 0x00, 0x77, 0x33, 0x90, 0x90, 0x90, 0x90, 0xF3, 0x0F, 0x10, 0x0D, 0xBC, 0x05, 0x00, 0x00, 0x0F, 0x2F, 0x0D, 0x65, 0x07, 0x00, 0x00, 0x72, 0x1E, 0x90, 0x90, 0x90, 0x90, 0x0F, 0x59, 0x05, 0xA8, 0x06, 0x00, 0x00, 0x0F, 0x10, 0x8C, 0x24, 0x08, 0x03, 0x00, 0x00, 0x0F, 0x58, 0xC1, 0x0F, 0x11, 0x05, 0x26, 0x06, 0x00, 0x00, 0xC3, 0x0F, 0x10, 0x84, 0x24, 0x08, 0x03, 0x00, 0x00, 0x0F, 0x11, 0x05, 0x16, 0x06, 0x00, 0x00, 0xC3
		};

		*(DWORD*)(Prediction_Script + 0x19) = (DWORD)(VectorCheck - (MainFunction_Prediction_Function + 0x19) - 4);
		*(DWORD*)(Prediction_Script + 0x21) = (DWORD)(VectorCheck - (MainFunction_Prediction_Function + 0x21) - 4);//VectorCheck
		*(DWORD*)(Prediction_Script + 0x29) = (DWORD)(VectorCheck - (MainFunction_Prediction_Function + 0x29));//VectorCheck + 4
		*(DWORD*)(Prediction_Script + 0x31) = (DWORD)(VectorCheck - (MainFunction_Prediction_Function + 0x31) + 4);
		*(DWORD*)(Prediction_Script + 0x39) = (DWORD)(VectorCheck - (MainFunction_Prediction_Function + 0x39) - 4);
		*(DWORD*)(Prediction_Script + 0x41) = (DWORD)(VectorCheck - (MainFunction_Prediction_Function + 0x41));
		*(DWORD*)(Prediction_Script + 0x49) = (DWORD)(VectorCheck - (MainFunction_Prediction_Function + 0x49) + 4);
		*(DWORD*)(Prediction_Script + 0x50) = (DWORD)(VectorCheck - (MainFunction_Prediction_Function + 0x50) - 4);
		*(DWORD*)(Prediction_Script + 0x5C) = (DWORD)(DirectDistance - (MainFunction_Prediction_Function + 0x5C) - 4);
		*(DWORD*)(Prediction_Script + 0x62) = (DWORD)(Prediction_Switch - (MainFunction_Prediction_Function + 0x62) - 5);
		*(DWORD*)(Prediction_Script + 0x78) = (DWORD)(Vector3_Prev - (MainFunction_Prediction_Function + 0x78) - 4);//pre pos
		*(DWORD*)(Prediction_Script + 0x88) = (DWORD)(VectorCheck - (MainFunction_Prediction_Function + 0x88) - 4);
		*(DWORD*)(Prediction_Script + 0x90) = (DWORD)(VectorCheck - (MainFunction_Prediction_Function + 0x90) - 4);//VectorCheck
		*(DWORD*)(Prediction_Script + 0x98) = (DWORD)(VectorCheck - (MainFunction_Prediction_Function + 0x98));//VectorCheck + 4
		*(DWORD*)(Prediction_Script + 0xA0) = (DWORD)(VectorCheck - (MainFunction_Prediction_Function + 0xA0) + 4);
		*(DWORD*)(Prediction_Script + 0xA8) = (DWORD)(VectorCheck - (MainFunction_Prediction_Function + 0xA8) - 4);
		*(DWORD*)(Prediction_Script + 0xB0) = (DWORD)(VectorCheck - (MainFunction_Prediction_Function + 0xB0));
		*(DWORD*)(Prediction_Script + 0xB8) = (DWORD)(VectorCheck - (MainFunction_Prediction_Function + 0xB8) + 4);
		*(DWORD*)(Prediction_Script + 0xBF) = (DWORD)(VectorCheck - (MainFunction_Prediction_Function + 0xBF) - 4);
		*(DWORD*)(Prediction_Script + 0xCB) = (DWORD)(MainFunction_Velocity - (MainFunction_Prediction_Function + 0xCB) - 4);
		*(DWORD*)(Prediction_Script + 0xD2) = (DWORD)(MainFunction_Velocity_Check - (MainFunction_Prediction_Function + 0xD2) - 4);
		*(DWORD*)(Prediction_Script + 0xE0) = (DWORD)(DirectDistance - (MainFunction_Prediction_Function + 0xE0) - 4);
		*(DWORD*)(Prediction_Script + 0xE7) = (DWORD)(MainFunction_Prediction_SwitchDistance - (MainFunction_Prediction_Function + 0xE7) - 4);
		*(DWORD*)(Prediction_Script + 0xF4) = (DWORD)(MainFunction_Prediction_Aim - (MainFunction_Prediction_Function + 0xF4) - 4);
		*(DWORD*)(Prediction_Script + 0x106) = (DWORD)(Vector3_Fut - (MainFunction_Prediction_Function + 0x106) - 4);
		*(DWORD*)(Prediction_Script + 0x116) = (DWORD)(Vector3_Fut - (MainFunction_Prediction_Function + 0x116) - 4);

		WriteProcessMemory(MODULE->hProcess, LPVOID(MainFunction_Prediction_Function), Prediction_Script, sizeof(Prediction_Script), NULL);

		BYTE Production_Script[] =
		{
			0x0F, 0x10, 0x05, 0x59, 0xFF, 0xFF, 0xFF, 0x0F, 0x10, 0x8C, 0x24, 0xA8, 0x03, 0x00, 0x00, 0x0F, 0x5C, 0xC1, 0x0F, 0x10, 0x0D, 0x67, 0xFF, 0xFF, 0xFF, 0x0F, 0x10, 0x15, 0xE0, 0x01, 0x00, 0x00, 0x0F, 0x59, 0xCA, 0x0F, 0x58, 0xC1, 0x0F, 0x10, 0xC8, 0x0F, 0x59, 0xC9, 0x0F, 0x11, 0x0D, 0x6D, 0xFF, 0xFF, 0xFF, 0xF3, 0x0F, 0x10, 0x0D, 0x65, 0xFF, 0xFF, 0xFF, 0xF3, 0x0F, 0x58, 0x0D, 0x61, 0xFF, 0xFF, 0xFF, 0xF3, 0x0F, 0x58, 0x0D, 0x5D, 0xFF, 0xFF, 0xFF, 0xF3, 0x0F, 0x11, 0x0D, 0x4D, 0xFF, 0xFF, 0xFF, 0xF3, 0x0F, 0x11, 0x0D, 0x49, 0xFF, 0xFF, 0xFF, 0xF3, 0x0F, 0x11, 0x0D, 0x45, 0xFF, 0xFF, 0xFF, 0x0F, 0x10, 0x0D, 0x36, 0xFF, 0xFF, 0xFF, 0x0F, 0x52, 0xC9, 0x0F, 0x59, 0xC1, 0x0F, 0x11, 0x05, 0x49, 0xFF, 0xFF, 0xFF, 0xC3
		};

		*(DWORD*)(Production_Script + 0x3) = (DWORD)(Vector3_Fut - (MainFunction_Product_Function + 0x3) - 4);
		*(DWORD*)(Production_Script + 0x15) = (DWORD)(Vector3_Height - (MainFunction_Product_Function + 0x15) - 4);
		*(DWORD*)(Production_Script + 0x1C) = (DWORD)(Vector3_Height_Multiple - (MainFunction_Product_Function + 0x1C) - 4);
		*(DWORD*)(Production_Script + 0x25 + 0xA) = (DWORD)(VectorCheck - (MainFunction_Product_Function + 0x25 + 0xA) - 4);
		*(DWORD*)(Production_Script + 0x2D + 0xA) = (DWORD)(VectorCheck - (MainFunction_Product_Function + 0x2D + 0xA) - 4);//VectorCheck
		*(DWORD*)(Production_Script + 0x35 + 0xA) = (DWORD)(VectorCheck - (MainFunction_Product_Function + 0x35 + 0xA));//VectorCheck + 4
		*(DWORD*)(Production_Script + 0x3D + 0xA) = (DWORD)(VectorCheck - (MainFunction_Product_Function + 0x3D + 0xA) + 4);
		*(DWORD*)(Production_Script + 0x45 + 0xA) = (DWORD)(VectorCheck - (MainFunction_Product_Function + 0x45 + 0xA) - 4);
		*(DWORD*)(Production_Script + 0x4D + 0xA) = (DWORD)(VectorCheck - (MainFunction_Product_Function + 0x4D + 0xA));
		*(DWORD*)(Production_Script + 0x55 + 0xA) = (DWORD)(VectorCheck - (MainFunction_Product_Function + 0x55 + 0xA) + 4);
		*(DWORD*)(Production_Script + 0x5C + 0xA) = (DWORD)(VectorCheck - (MainFunction_Product_Function + 0x5C + 0xA) - 4);
		*(DWORD*)(Production_Script + 0x69 + 0xA) = (DWORD)(Vector_Result - (MainFunction_Product_Function + 0x69 + 0xA) - 4);

		WriteProcessMemory(MODULE->hProcess, LPVOID(MainFunction_Product_Function), Production_Script, sizeof(Production_Script), NULL);

		BYTE SavePos_Script[] =
		{
			0xFE, 0x05, 0x3A, 0x04, 0x00, 0x00, 0x80, 0x3D, 0x33, 0x04, 0x00, 0x00, 0x02, 0x75, 0x1A, 0x90, 0x90, 0x90, 0x90, 0xC6, 0x05, 0x26, 0x04, 0x00, 0x00, 0x00, 0x0F, 0x10, 0x8C, 0x24, 0x08, 0x03, 0x00, 0x00, 0x0F, 0x11, 0x0D, 0x47, 0x03, 0x00, 0x00, 0xC3
		};
		*(DWORD*)(SavePos_Script + 0x2) = (DWORD)(IncCount - (MainFunction_SavePos_Function + 0x2) - 4);
		*(DWORD*)(SavePos_Script + 0x8) = (DWORD)(IncCount - (MainFunction_SavePos_Function + 0x8) - 5); // 
		*(DWORD*)(SavePos_Script + 0x15) = (DWORD)(IncCount - (MainFunction_SavePos_Function + 0x15) - 5); // 
		*(DWORD*)(SavePos_Script + 0x25) = (DWORD)(Vector3_Prev - (MainFunction_SavePos_Function + 0x25) - 4);

		WriteProcessMemory(MODULE->hProcess, LPVOID(MainFunction_SavePos_Function), SavePos_Script, sizeof(SavePos_Script), NULL);

		BYTE Move_Script[] =
		{
			0x48, 0x83, 0xEC, 0x30, 0x0F, 0x11, 0x04, 0x24, 0x0F, 0x11, 0x4C, 0x24, 0x10, 0x0F, 0x11, 0x54, 0x24, 0x20, 0x56, 0x48, 0x8B, 0x74, 0x24, 0x60, 0x81, 0x3E, 0x48, 0x8B, 0x8B, 0xC8, 0x75, 0x0E, 0x48, 0x8B, 0x75, 0x48, 0x90, 0x90, 0x90, 0x48, 0x89, 0x35, 0xD2, 0xFF, 0x00, 0x00, 0x80, 0x3D, 0xCB, 0xFF, 0x03, 0x00, 0x01, 0x75, 0x33, 0x80, 0x3D, 0xC2, 0xFF, 0xE7, 0xFF, 0x01, 0x74, 0x02, 0xEB, 0x28, 0xE8, 0xB9, 0xFF, 0xF9, 0xFF, 0x8B, 0x35, 0xB3, 0xFF, 0xFA, 0xFF, 0x89, 0x31, 0x8B, 0x35, 0xB3, 0xFF, 0xFA, 0xFF, 0x89, 0x71, 0x08, 0x80, 0x3D, 0xA1, 0xFF, 0x02, 0x00, 0x01, 0x75, 0x09, 0x8B, 0x35, 0x9D, 0xFF, 0xFA, 0xFF, 0x89, 0x71, 0x04, 0xC6, 0x05, 0x8F, 0xFF, 0xE7, 0xFF, 0x00, 0x5E, 0x0F, 0x10, 0x04, 0x24, 0x0F, 0x10, 0x4C, 0x24, 0x10, 0x0F, 0x10, 0x54, 0x24, 0x20, 0x48, 0x83, 0xC4, 0x30, 0xF3, 0x0F, 0x10, 0x19, 0xFF, 0x25, 0x00, 0x00, 0x00, 0x00, 0x43, 0xAE, 0x84, 0xD7, 0xF7, 0x7F, 0x00, 0x00
		};
		*(DWORD*)(Move_Script + 0x2A) = (DWORD)(MouseFunction_MouseAddr - (AngleAlloc + 0x2A) - 4);
		*(DWORD*)(Move_Script + 0x30) = (DWORD)(MouseClickCheck - (AngleAlloc + 0x30) - 5);
		*(DWORD*)(Move_Script + 0x39) = (DWORD)(MainFunction_StartUp - (AngleAlloc + 0x39) - 5);
		*(DWORD*)(Move_Script + 0x43) = (DWORD)(HumanizeAlloc - (AngleAlloc + 0x43) - 4);
		*(DWORD*)(Move_Script + 0x49) = (DWORD)(Vector_Result2 - (AngleAlloc + 0x49) - 4);
		*(DWORD*)(Move_Script + 0x51) = (DWORD)(Vector_Result2 - (AngleAlloc + 0x51) + 4);
		*(DWORD*)(Move_Script + 0x5A) = (DWORD)(MouseFunction_Y_Axis - (AngleAlloc + 0x5A) - 5);
		*(DWORD*)(Move_Script + 0x63) = (DWORD)(Vector_Result2 - (AngleAlloc + 0x63));
		*(DWORD*)(Move_Script + 0x6C) = (DWORD)(MainFunction_StartUp - (AngleAlloc + 0x6C) - 5);
		*(DWORD64*)(Move_Script + 0x8E) = MODULE->BaseAddress + offset::AngleHook + 0x4;

		WriteProcessMemory(MODULE->hProcess, LPVOID(AngleAlloc), Move_Script, sizeof(Move_Script), NULL);

		BYTE Humanize_Script[] =
		{
			0x0F, 0x10, 0x05, 0x79, 0xFC, 0xFF, 0xFF, 0x0F, 0x10, 0x09, 0x0F, 0x5C, 0xC1, 0x0F, 0x59, 0x05, 0x1C, 0x02, 0x00, 0x00, 0x0F, 0x58, 0xC1, 0x0F, 0x11, 0x05, 0xF2, 0x01, 0x00, 0x00, 0xC3
		};

		*(DWORD*)(Humanize_Script + 0x3) = (DWORD)(Vector_Result - (HumanizeAlloc + 0x3) - 4);
		*(DWORD*)(Humanize_Script + 0x10) = (DWORD)(HumanizeScore - (HumanizeAlloc + 0x10) - 4);
		*(DWORD*)(Humanize_Script + 0x1A) = (DWORD)(Vector_Result2 - (HumanizeAlloc + 0x1A) - 4);

		WriteProcessMemory(MODULE->hProcess, LPVOID(HumanizeAlloc), Humanize_Script, sizeof(Humanize_Script), NULL);

		BYTE MainFunction_BoneSkin_Script[] =
		{
		0x48, 0x8B, 0xB4, 0x24, 0x98, 0x08, 0x00, 0x00, 0x48, 0x8B, 0x76, 0x38, 0x48, 0x8B, 0x76, 0x48, 0x90, 0x90, 0x90, 0x90, 0x66, 0x81, 0xFE, 0x21, 0x19, 0x0F, 0x84, 0xC8, 0x17, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x24, 0x19, 0x0F, 0x84, 0xBD, 0x17, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x25, 0x19, 0x0F, 0x84, 0xB2, 0x17, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x22, 0x19, 0x0F, 0x84, 0xA7, 0x17, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x26, 0x19, 0x0F, 0x84, 0x9C, 0x17, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x4B, 0x19, 0x0F, 0x84, 0x91, 0x17, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x23, 0x19, 0x0F, 0x84, 0x86, 0x17, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x27, 0x19, 0x0F, 0x84, 0x7B, 0x17, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x9C, 0x19, 0x0F, 0x84, 0x70, 0x17, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x11, 0x1B, 0x0F, 0x84, 0x65, 0x17, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x4A, 0x19, 0x0F, 0x84, 0x5A, 0x17, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x50, 0x19, 0x0F, 0x84, 0x4F, 0x17, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x51, 0x19, 0x0F, 0x84, 0x44, 0x17, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xB8, 0x1B, 0x0F, 0x84, 0x39, 0x17, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x0F, 0x1B, 0x0F, 0x84, 0x2E, 0x17, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x0F, 0x1C, 0x0F, 0x84, 0x23, 0x17, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xD3, 0x1E, 0x0F, 0x84, 0x64, 0x16, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xCF, 0x21, 0x0F, 0x84, 0x59, 0x16, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x02, 0x2A, 0x0F, 0x84, 0x4E, 0x16, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x01, 0x2A, 0x0F, 0x84, 0x43, 0x16, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x04, 0x2A, 0x0F, 0x84, 0x38, 0x16, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x03, 0x2A, 0x0F, 0x84, 0x2D, 0x16, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x06, 0x2A, 0x0F, 0x84, 0x22, 0x16, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x05, 0x2A, 0x0F, 0x84, 0x17, 0x16, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x10, 0x2A, 0x0F, 0x84, 0x0C, 0x16, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x07, 0x2A, 0x0F, 0x84, 0x01, 0x16, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x09, 0x2A, 0x0F, 0x84, 0xF6, 0x15, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xD2, 0x21, 0x0F, 0x84, 0xEB, 0x15, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x13, 0x2A, 0x0F, 0x84, 0xE0, 0x15, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x88, 0x21, 0x0F, 0x84, 0x6B, 0x16, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x8A, 0x2C, 0x0F, 0x84, 0x60, 0x16, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x87, 0x2C, 0x0F, 0x84, 0x55, 0x16, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x89, 0x2C, 0x0F, 0x84, 0x4A, 0x16, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x88, 0x2C, 0x0F, 0x84, 0x3F, 0x16, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x92, 0x2C, 0x0F, 0x84, 0x34, 0x16, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x90, 0x2C, 0x0F, 0x84, 0x29, 0x16, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xDD, 0x2C, 0x0F, 0x84, 0x1E, 0x16, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x77, 0x2C, 0x0F, 0x84, 0x13, 0x16, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x7F, 0x2C, 0x0F, 0x84, 0x08, 0x16, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xDB, 0x2C, 0x0F, 0x84, 0xFD, 0x15, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x7A, 0x2C, 0x0F, 0x84, 0xF2, 0x15, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x27, 0x16, 0x0F, 0x84, 0x15, 0x15, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x28, 0x16, 0x0F, 0x84, 0x0A, 0x15, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x29, 0x16, 0x0F, 0x84, 0xFF, 0x14, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xCC, 0x18, 0x0F, 0x84, 0xF4, 0x14, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xCD, 0x18, 0x0F, 0x84, 0xE9, 0x14, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x46, 0x2A, 0x0F, 0x84, 0xDE, 0x14, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x99, 0x17, 0x0F, 0x84, 0xD3, 0x14, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x2A, 0x16, 0x0F, 0x84, 0xC8, 0x14, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xCE, 0x18, 0x0F, 0x84, 0xBD, 0x14, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x9F, 0x19, 0x0F, 0x84, 0xB2, 0x14, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xE8, 0x1A, 0x0F, 0x84, 0xA7, 0x14, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x93, 0x1B, 0x0F, 0x84, 0x9C, 0x14, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x98, 0x17, 0x0F, 0x84, 0x91, 0x14, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x95, 0x17, 0x0F, 0x84, 0x86, 0x14, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x94, 0x17, 0x0F, 0x84, 0x7B, 0x14, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x3E, 0x1C, 0x0F, 0x84, 0x70, 0x14, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x90, 0x1B, 0x0F, 0x84, 0x65, 0x14, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x97, 0x1E, 0x0F, 0x84, 0x5A, 0x14, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x23, 0x16, 0x0F, 0x84, 0x4F, 0x14, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x58, 0x2A, 0x0F, 0x84, 0x44, 0x14, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xCE, 0x1B, 0x0F, 0x84, 0x1A, 0x15, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xAB, 0x1E, 0x0F, 0x84, 0x0F, 0x15, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xAA, 0x1E, 0x0F, 0x84, 0x04, 0x15, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xA8, 0x1E, 0x0F, 0x84, 0xF9, 0x14, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xA9, 0x1E, 0x0F, 0x84, 0xEE, 0x14, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xA5, 0x1E, 0x0F, 0x84, 0xE3, 0x14, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xAD, 0x1E, 0x0F, 0x84, 0xD8, 0x14, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x31, 0x21, 0x0F, 0x84, 0xCD, 0x14, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x54, 0x2A, 0x0F, 0x84, 0xC2, 0x14, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xC2, 0x1E, 0x0F, 0x84, 0xB7, 0x14, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x80, 0x1E, 0x0F, 0x84, 0xAC, 0x14, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x81, 0x1E, 0x0F, 0x84, 0xA1, 0x14, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xC3, 0x1E, 0x0F, 0x84, 0x96, 0x14, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xBC, 0x1E, 0x0F, 0x84, 0x8B, 0x14, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x0F, 0x16, 0x0F, 0x84, 0x69, 0x13, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x10, 0x16, 0x0F, 0x84, 0x5E, 0x13, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xC3, 0x18, 0x0F, 0x84, 0x53, 0x13, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x11, 0x16, 0x0F, 0x84, 0x48, 0x13, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x12, 0x16, 0x0F, 0x84, 0x3D, 0x13, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xC5, 0x18, 0x0F, 0x84, 0x32, 0x13, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xC4, 0x18, 0x0F, 0x84, 0x27, 0x13, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x14, 0x1C, 0x0F, 0x84, 0x1C, 0x13, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xE3, 0x1B, 0x0F, 0x84, 0x11, 0x13, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xD9, 0x1B, 0x0F, 0x84, 0x06, 0x13, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xE4, 0x1B, 0x0F, 0x84, 0xFB, 0x12, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x13, 0x16, 0x0F, 0x84, 0x90, 0x12, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x16, 0x16, 0x0F, 0x84, 0x85, 0x12, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xC6, 0x18, 0x0F, 0x84, 0x7A, 0x12, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x7A, 0x19, 0x0F, 0x84, 0x6F, 0x12, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x64, 0x17, 0x0F, 0x84, 0x64, 0x12, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x15, 0x16, 0x0F, 0x84, 0x59, 0x12, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x14, 0x16, 0x0F, 0x84, 0x4E, 0x12, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xC7, 0x18, 0x0F, 0x84, 0x43, 0x12, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xC8, 0x18, 0x0F, 0x84, 0x38, 0x12, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xA0, 0x17, 0x0F, 0x84, 0x2D, 0x12, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xA1, 0x17, 0x0F, 0x84, 0x22, 0x12, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x65, 0x17, 0x0F, 0x84, 0x17, 0x12, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x3D, 0x1C, 0x0F, 0x84, 0x0C, 0x12, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xB0, 0x1B, 0x0F, 0x84, 0x01, 0x12, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xA2, 0x1E, 0x0F, 0x84, 0xF6, 0x11, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x19, 0x1A, 0x0F, 0x84, 0xEB, 0x11, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x6C, 0x19, 0x0F, 0x84, 0xE0, 0x11, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xD7, 0x16, 0x0F, 0x84, 0x29, 0x12, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xD8, 0x16, 0x0F, 0x84, 0x1E, 0x12, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xEA, 0x18, 0x0F, 0x84, 0x13, 0x12, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xD9, 0x16, 0x0F, 0x84, 0x08, 0x12, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xDA, 0x16, 0x0F, 0x84, 0xFD, 0x11, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xEB, 0x18, 0x0F, 0x84, 0xF2, 0x11, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x85, 0x17, 0x0F, 0x84, 0xE7, 0x11, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x89, 0x17, 0x0F, 0x84, 0xDC, 0x11, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x94, 0x19, 0x0F, 0x84, 0xD1, 0x11, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xEC, 0x18, 0x0F, 0x84, 0xC6, 0x11, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x7C, 0x19, 0x0F, 0x84, 0xBB, 0x11, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x84, 0x17, 0x0F, 0x84, 0xB0, 0x11, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x88, 0x17, 0x0F, 0x84, 0xA5, 0x11, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x1D, 0x1C, 0x0F, 0x84, 0x9A, 0x11, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x7D, 0x1B, 0x0F, 0x84, 0x8F, 0x11, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x91, 0x1B, 0x0F, 0x84, 0x84, 0x11, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xEB, 0x15, 0x0F, 0x84, 0x51, 0x12, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xED, 0x15, 0x0F, 0x84, 0x46, 0x12, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xB4, 0x18, 0x0F, 0x84, 0x3B, 0x12, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xEC, 0x15, 0x0F, 0x84, 0x30, 0x12, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xEE, 0x15, 0x0F, 0x84, 0x25, 0x12, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xB6, 0x18, 0x0F, 0x84, 0x1A, 0x12, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xB5, 0x18, 0x0F, 0x84, 0x0F, 0x12, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xA7, 0x19, 0x0F, 0x84, 0x04, 0x12, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xB4, 0x19, 0x0F, 0x84, 0xF9, 0x11, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xE3, 0x15, 0x0F, 0x84, 0xEE, 0x11, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xE4, 0x15, 0x0F, 0x84, 0xE3, 0x11, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xE8, 0x15, 0x0F, 0x84, 0xD8, 0x11, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xE7, 0x15, 0x0F, 0x84, 0xCD, 0x11, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xB2, 0x19, 0x0F, 0x84, 0xC2, 0x11, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x29, 0x21, 0x0F, 0x84, 0xB7, 0x11, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x28, 0x1C, 0x0F, 0x84, 0xAC, 0x11, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xB0, 0x19, 0x0F, 0x84, 0xA1, 0x11, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x07, 0x16, 0x0F, 0x84, 0x5A, 0x11, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x08, 0x16, 0x0F, 0x84, 0x4F, 0x11, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x09, 0x16, 0x0F, 0x84, 0x44, 0x11, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xBD, 0x18, 0x0F, 0x84, 0x39, 0x11, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x2D, 0x1A, 0x0F, 0x84, 0x2E, 0x11, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x9C, 0x17, 0x0F, 0x84, 0x23, 0x11, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x62, 0x19, 0x0F, 0x84, 0x18, 0x11, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x0A, 0x16, 0x0F, 0x84, 0x0D, 0x11, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x4D, 0x1C, 0x0F, 0x84, 0x02, 0x11, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xBE, 0x18, 0x0F, 0x84, 0xF7, 0x10, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xBF, 0x18, 0x0F, 0x84, 0xEC, 0x10, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x9D, 0x17, 0x0F, 0x84, 0xE1, 0x10, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x7D, 0x17, 0x0F, 0x84, 0xD6, 0x10, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x7C, 0x17, 0x0F, 0x84, 0xCB, 0x10, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xC1, 0x1B, 0x0F, 0x84, 0xC0, 0x10, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xE7, 0x20, 0x0F, 0x84, 0xB5, 0x10, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x13, 0x1C, 0x0F, 0x84, 0xAA, 0x10, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x73, 0x1C, 0x0F, 0x84, 0x9F, 0x10, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xE5, 0x2C, 0x0F, 0x84, 0x94, 0x10, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x0B, 0x16, 0x0F, 0x84, 0xD4, 0x10, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xC0, 0x18, 0x0F, 0x84, 0xC9, 0x10, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x0C, 0x16, 0x0F, 0x84, 0xBE, 0x10, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x0E, 0x16, 0x0F, 0x84, 0xB3, 0x10, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xC2, 0x18, 0x0F, 0x84, 0xA8, 0x10, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xC1, 0x18, 0x0F, 0x84, 0x9D, 0x10, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x78, 0x17, 0x0F, 0x84, 0x92, 0x10, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x0D, 0x16, 0x0F, 0x84, 0x87, 0x10, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x0B, 0x1A, 0x0F, 0x84, 0x7C, 0x10, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xEC, 0x20, 0x0F, 0x84, 0x71, 0x10, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xC2, 0x1B, 0x0F, 0x84, 0x66, 0x10, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x79, 0x17, 0x0F, 0x84, 0x5B, 0x10, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x11, 0x19, 0x0F, 0x84, 0x50, 0x10, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x10, 0x19, 0x0F, 0x84, 0x45, 0x10, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x47, 0x19, 0x0F, 0x84, 0x3A, 0x10, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x46, 0x19, 0x0F, 0x84, 0x2F, 0x10, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x7D, 0x25, 0x0F, 0x84, 0x24, 0x10, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x2F, 0x1E, 0x0F, 0x84, 0x19, 0x10, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x94, 0x1B, 0x0F, 0x84, 0x0E, 0x10, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xF7, 0x15, 0x0F, 0x84, 0x40, 0x0F, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xFA, 0x15, 0x0F, 0x84, 0x35, 0x0F, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xB7, 0x18, 0x0F, 0x84, 0x2A, 0x0F, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xF9, 0x15, 0x0F, 0x84, 0x1F, 0x0F, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xB9, 0x18, 0x0F, 0x84, 0x14, 0x0F, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xF3, 0x15, 0x0F, 0x84, 0x09, 0x0F, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xF0, 0x15, 0x0F, 0x84, 0xFE, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xF8, 0x15, 0x0F, 0x84, 0xF3, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xB8, 0x18, 0x0F, 0x84, 0xE8, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x4C, 0x1C, 0x0F, 0x84, 0xDD, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x76, 0x19, 0x0F, 0x84, 0xD2, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xCD, 0x21, 0x0F, 0x84, 0xC7, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x12, 0x1A, 0x0F, 0x84, 0xBC, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xF4, 0x15, 0x0F, 0x84, 0xB1, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xEF, 0x15, 0x0F, 0x84, 0xA6, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xCD, 0x1B, 0x0F, 0x84, 0x9B, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xCA, 0x1B, 0x0F, 0x84, 0x90, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x12, 0x1C, 0x0F, 0x84, 0x85, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xB6, 0x19, 0x0F, 0x84, 0x7A, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x0C, 0x1E, 0x0F, 0x84, 0x6F, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x08, 0x2A, 0x0F, 0x84, 0x64, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x1F, 0x16, 0x0F, 0x84, 0x68, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x20, 0x16, 0x0F, 0x84, 0x5D, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xC9, 0x18, 0x0F, 0x84, 0x52, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x21, 0x16, 0x0F, 0x84, 0x47, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x82, 0x19, 0x0F, 0x84, 0x3C, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x67, 0x1B, 0x0F, 0x84, 0x31, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x22, 0x16, 0x0F, 0x84, 0x26, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xCB, 0x18, 0x0F, 0x84, 0x1B, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xCA, 0x18, 0x0F, 0x84, 0x10, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xAC, 0x21, 0x0F, 0x84, 0x05, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xE1, 0x1B, 0x0F, 0x84, 0xFA, 0x0D, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xA5, 0x17, 0x0F, 0x84, 0xEF, 0x0D, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xA4, 0x17, 0x0F, 0x84, 0xE4, 0x0D, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x15, 0x19, 0x0F, 0x84, 0xD9, 0x0D, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x14, 0x19, 0x0F, 0x84, 0xCE, 0x0D, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xEC, 0x1B, 0x0F, 0x84, 0xC3, 0x0D, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x10, 0x1A, 0x0F, 0x84, 0xB8, 0x0D, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x81, 0x19, 0x0F, 0x84, 0xAD, 0x0D, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xDB, 0x15, 0x0F, 0x84, 0x65, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xAE, 0x18, 0x0F, 0x84, 0x5A, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xDC, 0x15, 0x0F, 0x84, 0x4F, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xDE, 0x15, 0x0F, 0x84, 0x44, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xD4, 0x15, 0x0F, 0x84, 0x39, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xD8, 0x15, 0x0F, 0x84, 0x2E, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xDD, 0x15, 0x0F, 0x84, 0x23, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xB0, 0x18, 0x0F, 0x84, 0x18, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xAF, 0x18, 0x0F, 0x84, 0x0D, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x79, 0x19, 0x0F, 0x84, 0x02, 0x0E, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x2A, 0x1A, 0x0F, 0x84, 0xF7, 0x0D, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xD3, 0x15, 0x0F, 0x84, 0xEC, 0x0D, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xD7, 0x15, 0x0F, 0x84, 0xE1, 0x0D, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xC6, 0x1B, 0x0F, 0x84, 0xD6, 0x0D, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x6A, 0x19, 0x0F, 0x84, 0xCB, 0x0D, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x71, 0x1F, 0x0F, 0x84, 0xC0, 0x0D, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x11, 0x1C, 0x0F, 0x84, 0xB5, 0x0D, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x7B, 0x1B, 0x0F, 0x84, 0xAA, 0x0D, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xE8, 0x1B, 0x0F, 0x84, 0xAE, 0x0D, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x5E, 0x1C, 0x0F, 0x84, 0xA3, 0x0D, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x5F, 0x1C, 0x0F, 0x84, 0x98, 0x0D, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x61, 0x1C, 0x0F, 0x84, 0x8D, 0x0D, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x60, 0x1C, 0x0F, 0x84, 0x82, 0x0D, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x62, 0x1C, 0x0F, 0x84, 0x77, 0x0D, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x63, 0x1C, 0x0F, 0x84, 0x6C, 0x0D, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x36, 0x21, 0x0F, 0x84, 0x61, 0x0D, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x6A, 0x1C, 0x0F, 0x84, 0x56, 0x0D, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x42, 0x1C, 0x0F, 0x84, 0x4B, 0x0D, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x45, 0x1C, 0x0F, 0x84, 0x40, 0x0D, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x79, 0x1C, 0x0F, 0x84, 0x35, 0x0D, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x2A, 0x21, 0x0F, 0x84, 0x2A, 0x0D, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x75, 0x1C, 0x0F, 0x84, 0x1F, 0x0D, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x72, 0x2C, 0x0F, 0x84, 0x14, 0x0D, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x33, 0x19, 0x0F, 0x84, 0xE0, 0x0B, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x35, 0x19, 0x0F, 0x84, 0xD5, 0x0B, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x34, 0x19, 0x0F, 0x84, 0xCA, 0x0B, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x37, 0x19, 0x0F, 0x84, 0xBF, 0x0B, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x36, 0x19, 0x0F, 0x84, 0xB4, 0x0B, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x38, 0x19, 0x0F, 0x84, 0xA9, 0x0B, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x95, 0x1B, 0x0F, 0x84, 0x9E, 0x0B, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x11, 0x2A, 0x0F, 0x84, 0x93, 0x0B, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x10, 0x1C, 0x0F, 0x84, 0x88, 0x0B, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x62, 0x1B, 0x0F, 0x84, 0x7D, 0x0B, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x65, 0x1B, 0x0F, 0x84, 0x72, 0x0B, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x64, 0x1B, 0x0F, 0x84, 0x67, 0x0B, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x63, 0x1B, 0x0F, 0x84, 0x5C, 0x0B, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x61, 0x1B, 0x0F, 0x84, 0x51, 0x0B, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x6F, 0x1C, 0x0F, 0x84, 0x46, 0x0B, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xBF, 0x16, 0x0F, 0x84, 0x28, 0x0C, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xC2, 0x16, 0x0F, 0x84, 0x1D, 0x0C, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x68, 0x17, 0x0F, 0x84, 0x12, 0x0C, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xC1, 0x16, 0x0F, 0x84, 0x07, 0x0C, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xE1, 0x18, 0x0F, 0x84, 0xFC, 0x0B, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xC0, 0x16, 0x0F, 0x84, 0xF1, 0x0B, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x29, 0x19, 0x0F, 0x84, 0xE6, 0x0B, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x28, 0x19, 0x0F, 0x84, 0xDB, 0x0B, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xA0, 0x19, 0x0F, 0x84, 0xD0, 0x0B, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x16, 0x1A, 0x0F, 0x84, 0xC5, 0x0B, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xEA, 0x19, 0x0F, 0x84, 0xBA, 0x0B, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x69, 0x17, 0x0F, 0x84, 0xAF, 0x0B, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x2A, 0x19, 0x0F, 0x84, 0xA4, 0x0B, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x2B, 0x19, 0x0F, 0x84, 0x99, 0x0B, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xE6, 0x20, 0x0F, 0x84, 0x8E, 0x0B, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x0B, 0x1C, 0x0F, 0x84, 0x83, 0x0B, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xE6, 0x19, 0x0F, 0x84, 0x78, 0x0B, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xA7, 0x16, 0x0F, 0x84, 0x6D, 0x0B, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x97, 0x16, 0x0F, 0x84, 0xB1, 0x0A, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x99, 0x16, 0x0F, 0x84, 0xA6, 0x0A, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xDB, 0x18, 0x0F, 0x84, 0x9B, 0x0A, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xDD, 0x18, 0x0F, 0x84, 0x90, 0x0A, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x7C, 0x16, 0x0F, 0x84, 0x85, 0x0A, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x9A, 0x16, 0x0F, 0x84, 0x7A, 0x0A, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x98, 0x16, 0x0F, 0x84, 0x6F, 0x0A, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xDC, 0x18, 0x0F, 0x84, 0x64, 0x0A, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x3C, 0x1C, 0x0F, 0x84, 0x59, 0x0A, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x07, 0x1A, 0x0F, 0x84, 0x4E, 0x0A, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x70, 0x17, 0x0F, 0x84, 0x43, 0x0A, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x71, 0x17, 0x0F, 0x84, 0x38, 0x0A, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x7B, 0x16, 0x0F, 0x84, 0x2D, 0x0A, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xC0, 0x1B, 0x0F, 0x84, 0x22, 0x0A, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x5A, 0x19, 0x0F, 0x84, 0x17, 0x0A, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xEB, 0x1B, 0x0F, 0x84, 0x0C, 0x0A, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xC1, 0x21, 0x0F, 0x84, 0x01, 0x0A, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x74, 0x1C, 0x0F, 0x84, 0xF6, 0x09, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x8B, 0x16, 0x0F, 0x84, 0xEB, 0x09, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x5F, 0x16, 0x0F, 0x84, 0x80, 0x09, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x60, 0x16, 0x0F, 0x84, 0x75, 0x09, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x62, 0x16, 0x0F, 0x84, 0x6A, 0x09, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xD6, 0x18, 0x0F, 0x84, 0x5F, 0x09, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x3F, 0x16, 0x0F, 0x84, 0x54, 0x09, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x54, 0x19, 0x0F, 0x84, 0x49, 0x09, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xD5, 0x18, 0x0F, 0x84, 0x3E, 0x09, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x61, 0x16, 0x0F, 0x84, 0x33, 0x09, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xB1, 0x17, 0x0F, 0x84, 0x28, 0x09, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xA1, 0x19, 0x0F, 0x84, 0x1D, 0x09, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x0C, 0x2A, 0x0F, 0x84, 0x12, 0x09, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x87, 0x1B, 0x0F, 0x84, 0x07, 0x09, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x7E, 0x1B, 0x0F, 0x84, 0xFC, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x40, 0x16, 0x0F, 0x84, 0xF1, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x3B, 0x16, 0x0F, 0x84, 0xE6, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x3C, 0x16, 0x0F, 0x84, 0xDB, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x55, 0x19, 0x0F, 0x84, 0xD0, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xB6, 0x1E, 0x0F, 0x84, 0xC5, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xBB, 0x21, 0x0F, 0x84, 0xBA, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x91, 0x19, 0x0F, 0x84, 0xAF, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xA3, 0x16, 0x0F, 0x84, 0xBC, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xDE, 0x18, 0x0F, 0x84, 0xB1, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xA4, 0x16, 0x0F, 0x84, 0xA6, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x14, 0x1A, 0x0F, 0x84, 0x9B, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x1C, 0x1C, 0x0F, 0x84, 0x90, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xA5, 0x16, 0x0F, 0x84, 0x85, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xA6, 0x16, 0x0F, 0x84, 0x7A, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xE0, 0x18, 0x0F, 0x84, 0x6F, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xDF, 0x18, 0x0F, 0x84, 0x64, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x1B, 0x1C, 0x0F, 0x84, 0x59, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xA0, 0x16, 0x0F, 0x84, 0x4E, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x9F, 0x16, 0x0F, 0x84, 0x43, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x9C, 0x16, 0x0F, 0x84, 0x38, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x9B, 0x16, 0x0F, 0x84, 0x2D, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xE9, 0x20, 0x0F, 0x84, 0x22, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x5C, 0x19, 0x0F, 0x84, 0x17, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x7D, 0x19, 0x0F, 0x84, 0x0C, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xC7, 0x16, 0x0F, 0x84, 0x82, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xC9, 0x16, 0x0F, 0x84, 0x77, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xCA, 0x16, 0x0F, 0x84, 0x6C, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xE4, 0x18, 0x0F, 0x84, 0x61, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xC8, 0x16, 0x0F, 0x84, 0x56, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xE6, 0x18, 0x0F, 0x84, 0x4B, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xE5, 0x18, 0x0F, 0x84, 0x40, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xA6, 0x19, 0x0F, 0x84, 0x35, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xE8, 0x20, 0x0F, 0x84, 0x2A, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x8C, 0x17, 0x0F, 0x84, 0x1F, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x8D, 0x17, 0x0F, 0x84, 0x14, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x91, 0x17, 0x0F, 0x84, 0x09, 0x08, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x90, 0x17, 0x0F, 0x84, 0xFE, 0x07, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xC8, 0x1B, 0x0F, 0x84, 0xF3, 0x07, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xBE, 0x1E, 0x0F, 0x84, 0xE8, 0x07, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x1E, 0x1C, 0x0F, 0x84, 0xDD, 0x07, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x1E, 0x1A, 0x0F, 0x84, 0xD2, 0x07, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xC3, 0x16, 0x0F, 0x84, 0xC7, 0x07, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x5D, 0x2A, 0x0F, 0x84, 0xBC, 0x07, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x2B, 0x16, 0x0F, 0x84, 0xC0, 0x07, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x2D, 0x16, 0x0F, 0x84, 0xB5, 0x07, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x2E, 0x16, 0x0F, 0x84, 0xAA, 0x07, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x1D, 0x1A, 0x0F, 0x84, 0x9F, 0x07, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x2C, 0x16, 0x0F, 0x84, 0x94, 0x07, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xCF, 0x18, 0x0F, 0x84, 0x89, 0x07, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xD0, 0x18, 0x0F, 0x84, 0x7E, 0x07, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xD1, 0x18, 0x0F, 0x84, 0x73, 0x07, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x38, 0x21, 0x0F, 0x84, 0x68, 0x07, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x8B, 0x19, 0x0F, 0x84, 0x5D, 0x07, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x8A, 0x19, 0x0F, 0x84, 0x52, 0x07, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x8C, 0x19, 0x0F, 0x84, 0x47, 0x07, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x8D, 0x19, 0x0F, 0x84, 0x3C, 0x07, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xC7, 0x1B, 0x0F, 0x84, 0x31, 0x07, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xDB, 0x20, 0x0F, 0x84, 0x26, 0x07, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x16, 0x1C, 0x0F, 0x84, 0x1B, 0x07, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x17, 0x1C, 0x0F, 0x84, 0x10, 0x07, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x3B, 0x21, 0x0F, 0x84, 0x05, 0x07, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xE7, 0x16, 0x0F, 0x84, 0x09, 0x07, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xE9, 0x16, 0x0F, 0x84, 0xFE, 0x06, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x98, 0x19, 0x0F, 0x84, 0xF3, 0x06, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xE4, 0x16, 0x0F, 0x84, 0xE8, 0x06, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xE3, 0x16, 0x0F, 0x84, 0xDD, 0x06, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xDB, 0x16, 0x0F, 0x84, 0xD2, 0x06, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xE8, 0x16, 0x0F, 0x84, 0xC7, 0x06, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xEA, 0x16, 0x0F, 0x84, 0xBC, 0x06, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xED, 0x18, 0x0F, 0x84, 0xB1, 0x06, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x44, 0x1C, 0x0F, 0x84, 0xA6, 0x06, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xEE, 0x18, 0x0F, 0x84, 0x9B, 0x06, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xEF, 0x18, 0x0F, 0x84, 0x90, 0x06, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x27, 0x1A, 0x0F, 0x84, 0x85, 0x06, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xDC, 0x16, 0x0F, 0x84, 0x7A, 0x06, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xDF, 0x16, 0x0F, 0x84, 0x6F, 0x06, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x33, 0x21, 0x0F, 0x84, 0x64, 0x06, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x0A, 0x1E, 0x0F, 0x84, 0x59, 0x06, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x92, 0x1B, 0x0F, 0x84, 0x4E, 0x06, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x37, 0x16, 0x0F, 0x84, 0x7F, 0x06, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x38, 0x16, 0x0F, 0x84, 0x74, 0x06, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x39, 0x16, 0x0F, 0x84, 0x69, 0x06, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xAD, 0x1B, 0x0F, 0x84, 0x5E, 0x06, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x3A, 0x16, 0x0F, 0x84, 0x53, 0x06, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xD2, 0x18, 0x0F, 0x84, 0x48, 0x06, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xD4, 0x18, 0x0F, 0x84, 0x3D, 0x06, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xD3, 0x18, 0x0F, 0x84, 0x32, 0x06, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x7B, 0x19, 0x0F, 0x84, 0x27, 0x06, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x18, 0x1C, 0x0F, 0x84, 0x1C, 0x06, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x2F, 0x16, 0x0F, 0x84, 0x11, 0x06, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x30, 0x16, 0x0F, 0x84, 0x06, 0x06, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x33, 0x16, 0x0F, 0x84, 0xFB, 0x05, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x34, 0x16, 0x0F, 0x84, 0xF0, 0x05, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xCB, 0x1B, 0x0F, 0x84, 0xE5, 0x05, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x68, 0x19, 0x0F, 0x84, 0xDA, 0x05, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xAB, 0x21, 0x0F, 0x84, 0xCF, 0x05, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x60, 0x1B, 0x0F, 0x84, 0xC4, 0x05, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x6E, 0x1C, 0x0F, 0x84, 0xB9, 0x05, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x0F, 0x17, 0x0F, 0x84, 0xBD, 0x05, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x11, 0x17, 0x0F, 0x84, 0xB2, 0x05, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x12, 0x17, 0x0F, 0x84, 0xA7, 0x05, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x10, 0x17, 0x0F, 0x84, 0x9C, 0x05, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xF1, 0x18, 0x0F, 0x84, 0x91, 0x05, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x42, 0x19, 0x0F, 0x84, 0x86, 0x05, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x5E, 0x19, 0x0F, 0x84, 0x7B, 0x05, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xF0, 0x18, 0x0F, 0x84, 0x70, 0x05, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xF2, 0x18, 0x0F, 0x84, 0x65, 0x05, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x07, 0x1B, 0x0F, 0x84, 0x5A, 0x05, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xEB, 0x20, 0x0F, 0x84, 0x4F, 0x05, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xEB, 0x16, 0x0F, 0x84, 0x44, 0x05, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xEC, 0x16, 0x0F, 0x84, 0x39, 0x05, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x0B, 0x17, 0x0F, 0x84, 0x2E, 0x05, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x0C, 0x17, 0x0F, 0x84, 0x23, 0x05, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x43, 0x19, 0x0F, 0x84, 0x18, 0x05, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xF2, 0x21, 0x0F, 0x84, 0x0D, 0x05, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x66, 0x1B, 0x0F, 0x84, 0x02, 0x05, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x2B, 0x1B, 0x0F, 0x84, 0xF7, 0x04, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xF7, 0x16, 0x0F, 0x84, 0xEC, 0x04, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x1B, 0x17, 0x0F, 0x84, 0xB4, 0x04, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x1C, 0x17, 0x0F, 0x84, 0xA9, 0x04, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x1E, 0x17, 0x0F, 0x84, 0x9E, 0x04, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xF3, 0x18, 0x0F, 0x84, 0x93, 0x04, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x1D, 0x17, 0x0F, 0x84, 0x88, 0x04, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x21, 0x1C, 0x0F, 0x84, 0x7D, 0x04, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xF4, 0x18, 0x0F, 0x84, 0x72, 0x04, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xF5, 0x18, 0x0F, 0x84, 0x67, 0x04, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x78, 0x19, 0x0F, 0x84, 0x5C, 0x04, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xBA, 0x21, 0x0F, 0x84, 0x51, 0x04, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x14, 0x17, 0x0F, 0x84, 0x46, 0x04, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x13, 0x17, 0x0F, 0x84, 0x3B, 0x04, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x19, 0x19, 0x0F, 0x84, 0x30, 0x04, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x18, 0x19, 0x0F, 0x84, 0x25, 0x04, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x20, 0x1C, 0x0F, 0x84, 0x1A, 0x04, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xC9, 0x1B, 0x0F, 0x84, 0x0F, 0x04, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x13, 0x21, 0x0F, 0x84, 0x04, 0x04, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x1F, 0x1C, 0x0F, 0x84, 0xF9, 0x03, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xAF, 0x1B, 0x0F, 0x84, 0xEE, 0x03, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xD3, 0x16, 0x0F, 0x84, 0x3E, 0x03, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xD6, 0x16, 0x0F, 0x84, 0x33, 0x03, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xE7, 0x18, 0x0F, 0x84, 0x28, 0x03, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xE9, 0x18, 0x0F, 0x84, 0x1D, 0x03, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x7F, 0x19, 0x0F, 0x84, 0x12, 0x03, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xD5, 0x16, 0x0F, 0x84, 0x07, 0x03, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xD4, 0x16, 0x0F, 0x84, 0xFC, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xE8, 0x18, 0x0F, 0x84, 0xF1, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xCF, 0x16, 0x0F, 0x84, 0xE6, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xD0, 0x16, 0x0F, 0x84, 0xDB, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xCB, 0x16, 0x0F, 0x84, 0xD0, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xCC, 0x16, 0x0F, 0x84, 0xC5, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xAC, 0x1E, 0x0F, 0x84, 0xBA, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x64, 0x19, 0x0F, 0x84, 0xAF, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xC6, 0x1C, 0x0F, 0x84, 0xA4, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x56, 0x1C, 0x0F, 0x84, 0x75, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x3F, 0x21, 0x0F, 0x84, 0x6A, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x3D, 0x21, 0x0F, 0x84, 0x5F, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x3C, 0x21, 0x0F, 0x84, 0x54, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x3E, 0x21, 0x0F, 0x84, 0x49, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x43, 0x21, 0x0F, 0x84, 0x3E, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x42, 0x21, 0x0F, 0x84, 0x33, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x4A, 0x21, 0x0F, 0x84, 0x28, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x28, 0x21, 0x0F, 0x84, 0x1D, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x47, 0x21, 0x0F, 0x84, 0x12, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x30, 0x21, 0x0F, 0x84, 0x07, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x4E, 0x21, 0x0F, 0x84, 0xFC, 0x01, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xD8, 0x2C, 0x0F, 0x84, 0xF1, 0x01, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x6B, 0x16, 0x0F, 0x84, 0x16, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x6E, 0x16, 0x0F, 0x84, 0x0B, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xD8, 0x18, 0x0F, 0x84, 0x00, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x6D, 0x16, 0x0F, 0x84, 0xF5, 0x01, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x6C, 0x16, 0x0F, 0x84, 0xEA, 0x01, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xD9, 0x18, 0x0F, 0x84, 0xDF, 0x01, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x1B, 0x1A, 0x0F, 0x84, 0xD4, 0x01, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x64, 0x16, 0x0F, 0x84, 0xC9, 0x01, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xDA, 0x18, 0x0F, 0x84, 0xBE, 0x01, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x1A, 0x1C, 0x0F, 0x84, 0xB3, 0x01, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x68, 0x16, 0x0F, 0x84, 0xA8, 0x01, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x67, 0x16, 0x0F, 0x84, 0x9D, 0x01, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x63, 0x16, 0x0F, 0x84, 0x92, 0x01, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x44, 0x19, 0x0F, 0x84, 0x87, 0x01, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x45, 0x19, 0x0F, 0x84, 0x7C, 0x01, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x6E, 0x19, 0x0F, 0x84, 0x71, 0x01, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x34, 0x21, 0x0F, 0x84, 0x66, 0x01, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x19, 0x1C, 0x0F, 0x84, 0x5B, 0x01, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x6A, 0x1B, 0x0F, 0x84, 0x50, 0x01, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xDF, 0x2C, 0x0F, 0x84, 0x45, 0x01, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x03, 0x16, 0x0F, 0x84, 0x87, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xBA, 0x18, 0x0F, 0x84, 0x7C, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x04, 0x16, 0x0F, 0x84, 0x71, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xBB, 0x18, 0x0F, 0x84, 0x66, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xFB, 0x15, 0x0F, 0x84, 0x5B, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x66, 0x19, 0x0F, 0x84, 0x50, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x05, 0x16, 0x0F, 0x84, 0x45, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x06, 0x16, 0x0F, 0x84, 0x3A, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x40, 0x1C, 0x0F, 0x84, 0x2F, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xBC, 0x18, 0x0F, 0x84, 0x24, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xA3, 0x19, 0x0F, 0x84, 0x19, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xFC, 0x15, 0x0F, 0x84, 0x0E, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xFF, 0x15, 0x0F, 0x84, 0x03, 0x02, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x00, 0x16, 0x0F, 0x84, 0xF8, 0x01, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x2D, 0x1E, 0x0F, 0x84, 0xED, 0x01, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xE7, 0x1B, 0x0F, 0x84, 0xE2, 0x01, 0x00, 0x00, 0x66, 0x81, 0xFE, 0x60, 0x19, 0x0F, 0x84, 0xD7, 0x01, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xD1, 0x21, 0x0F, 0x84, 0xCC, 0x01, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xCF, 0x28, 0x0F, 0x84, 0xD0, 0x01, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xFC, 0x1A, 0x0F, 0x84, 0xD4, 0x01, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xF8, 0x1A, 0x0F, 0x84, 0xC9, 0x01, 0x00, 0x00, 0x66, 0x81, 0xFE, 0xFA, 0x1A, 0x0F, 0x84, 0xBE, 0x01, 0x00, 0x00, 0xC7, 0x05, 0x84, 0x0A, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x3F, 0xC3, 0xC7, 0x05, 0x79, 0x0A, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x3F, 0xEB, 0xF3, 0xC7, 0x05, 0x6D, 0x0A, 0x00, 0x00, 0xCD, 0xCC, 0xEC, 0x3F, 0xEB, 0xE7, 0xC7, 0x05, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x3F, 0xEB, 0xDB, 0xC7, 0x05, 0x55, 0x0A, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x3F, 0xEB, 0xCF, 0xC7, 0x05, 0x49, 0x0A, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x3F, 0xEB, 0xC3, 0xC7, 0x05, 0x3D, 0x0A, 0x00, 0x00, 0xEC, 0x51, 0xD8, 0x3F, 0xEB, 0xB7, 0xC7, 0x05, 0x31, 0x0A, 0x00, 0x00, 0x33, 0x33, 0xD3, 0x3F, 0xEB, 0xAB, 0xC7, 0x05, 0x25, 0x0A, 0x00, 0x00, 0x5C, 0x8F, 0xA2, 0x3F, 0xEB, 0x9F, 0xC7, 0x05, 0x19, 0x0A, 0x00, 0x00, 0x33, 0x33, 0xD3, 0x3F, 0xEB, 0x93, 0xC7, 0x05, 0x0D, 0x0A, 0x00, 0x00, 0x33, 0x33, 0xD3, 0x3F, 0xEB, 0x87, 0xC7, 0x05, 0x01, 0x0A, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x3F, 0xE9, 0x78, 0xFF, 0xFF, 0xFF, 0xC7, 0x05, 0xF2, 0x09, 0x00, 0x00, 0x33, 0x33, 0xB3, 0x3F, 0xE9, 0x69, 0xFF, 0xFF, 0xFF, 0xC7, 0x05, 0xE3, 0x09, 0x00, 0x00, 0x33, 0x33, 0xB3, 0x3F, 0xE9, 0x5A, 0xFF, 0xFF, 0xFF, 0xC7, 0x05, 0xD4, 0x09, 0x00, 0x00, 0xAE, 0x47, 0xC1, 0x3F, 0xE9, 0x4B, 0xFF, 0xFF, 0xFF, 0xC7, 0x05, 0xC5, 0x09, 0x00, 0x00, 0x33, 0x33, 0xB3, 0x3F, 0xE9, 0x3C, 0xFF, 0xFF, 0xFF, 0xC7, 0x05, 0xB6, 0x09, 0x00, 0x00, 0x33, 0x33, 0xB3, 0x3F, 0xE9, 0x2D, 0xFF, 0xFF, 0xFF, 0xC7, 0x05, 0xA7, 0x09, 0x00, 0x00, 0x33, 0x33, 0xB3, 0x3F, 0xE9, 0x1E, 0xFF, 0xFF, 0xFF, 0xC7, 0x05, 0x98, 0x09, 0x00, 0x00, 0xF6, 0x28, 0xBC, 0x3F, 0xE9, 0x0F, 0xFF, 0xFF, 0xFF, 0xC7, 0x05, 0x89, 0x09, 0x00, 0x00, 0xC3, 0xF5, 0xA8, 0x3F, 0xE9, 0x00, 0xFF, 0xFF, 0xFF, 0xC7, 0x05, 0x7A, 0x09, 0x00, 0x00, 0x29, 0x5C, 0x8F, 0x3F, 0xE9, 0xF1, 0xFE, 0xFF, 0xFF, 0xC7, 0x05, 0x6B, 0x09, 0x00, 0x00, 0xB8, 0x1E, 0xA5, 0x3F, 0xE9, 0xE2, 0xFE, 0xFF, 0xFF, 0xC7, 0x05, 0x5C, 0x09, 0x00, 0x00, 0x14, 0xAE, 0xC7, 0x3F, 0xE9, 0xD3, 0xFE, 0xFF, 0xFF, 0xC7, 0x05, 0x4D, 0x09, 0x00, 0x00, 0x0A, 0xD7, 0xA3, 0x3F, 0xE9, 0xC4, 0xFE, 0xFF, 0xFF, 0xC7, 0x05, 0x3E, 0x09, 0x00, 0x00, 0x33, 0x33, 0x93, 0x3F, 0xE9, 0xB5, 0xFE, 0xFF, 0xFF, 0xC7, 0x05, 0x2F, 0x09, 0x00, 0x00, 0x66, 0x66, 0xC6, 0x3F, 0xE9, 0xA6, 0xFE, 0xFF, 0xFF, 0xC7, 0x05, 0x20, 0x09, 0x00, 0x00, 0x33, 0x33, 0xD3, 0x3F, 0xE9, 0x97, 0xFE, 0xFF, 0xFF, 0xC7, 0x05, 0x11, 0x09, 0x00, 0x00, 0x66, 0x66, 0xC6, 0x3F, 0xE9, 0x88, 0xFE, 0xFF, 0xFF, 0xC7, 0x05, 0x02, 0x09, 0x00, 0x00, 0x66, 0x66, 0xC6, 0x3F, 0xE9, 0x79, 0xFE, 0xFF, 0xFF, 0xC7, 0x05, 0xF3, 0x08, 0x00, 0x00, 0x60, 0xE5, 0xA0, 0x3F, 0xE9, 0x6A, 0xFE, 0xFF, 0xFF, 0xC7, 0x05, 0xE4, 0x08, 0x00, 0x00, 0x66, 0x66, 0xC6, 0x3F, 0xE9, 0x5B, 0xFE, 0xFF, 0xFF, 0xC7, 0x05, 0xD5, 0x08, 0x00, 0x00, 0x66, 0x66, 0xE6, 0x3F, 0xE9, 0x4C, 0xFE, 0xFF, 0xFF, 0xC7, 0x05, 0xC6, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xE9, 0x3D, 0xFE, 0xFF, 0xFF 
		};

		*(DWORD*)(MainFunction_BoneSkin_Script + 0x1658) = (DWORD)(Vector3_Height - (MainFunction_BoneSkin_Function + 0x1658) - 4);
		*(DWORD*)(MainFunction_BoneSkin_Script + 0x1663) = (DWORD)(Vector3_Height - (MainFunction_BoneSkin_Function + 0x1663) - 4);
		*(DWORD*)(MainFunction_BoneSkin_Script + 0x166F) = (DWORD)(Vector3_Height - (MainFunction_BoneSkin_Function + 0x166F) - 4);
		*(DWORD*)(MainFunction_BoneSkin_Script + 0x167B) = (DWORD)(Vector3_Height - (MainFunction_BoneSkin_Function + 0x167B) - 4);
		*(DWORD*)(MainFunction_BoneSkin_Script + 0x1687) = (DWORD)(Vector3_Height - (MainFunction_BoneSkin_Function + 0x1687) - 4);
		*(DWORD*)(MainFunction_BoneSkin_Script + 0x1693) = (DWORD)(Vector3_Height - (MainFunction_BoneSkin_Function + 0x1693) - 4);
		*(DWORD*)(MainFunction_BoneSkin_Script + 0x169F) = (DWORD)(Vector3_Height - (MainFunction_BoneSkin_Function + 0x169F) - 4);
		*(DWORD*)(MainFunction_BoneSkin_Script + 0x16AB) = (DWORD)(Vector3_Height - (MainFunction_BoneSkin_Function + 0x16AB) - 4);
		*(DWORD*)(MainFunction_BoneSkin_Script + 0x16B7) = (DWORD)(Vector3_Height - (MainFunction_BoneSkin_Function + 0x16B7) - 4);
		*(DWORD*)(MainFunction_BoneSkin_Script + 0x16C3) = (DWORD)(Vector3_Height - (MainFunction_BoneSkin_Function + 0x16C3) - 4);
		*(DWORD*)(MainFunction_BoneSkin_Script + 0x16CF) = (DWORD)(Vector3_Height - (MainFunction_BoneSkin_Function + 0x16CF) - 4);
		*(DWORD*)(MainFunction_BoneSkin_Script + 0x16DB) = (DWORD)(Vector3_Height - (MainFunction_BoneSkin_Function + 0x16DB) - 4);
		*(DWORD*)(MainFunction_BoneSkin_Script + 0x16EA) = (DWORD)(Vector3_Height - (MainFunction_BoneSkin_Function + 0x16EA) - 4);
		*(DWORD*)(MainFunction_BoneSkin_Script + 0x16F9) = (DWORD)(Vector3_Height - (MainFunction_BoneSkin_Function + 0x16F9) - 4);
		*(DWORD*)(MainFunction_BoneSkin_Script + 0x1708) = (DWORD)(Vector3_Height - (MainFunction_BoneSkin_Function + 0x1708) - 4);
		*(DWORD*)(MainFunction_BoneSkin_Script + 0x1717) = (DWORD)(Vector3_Height - (MainFunction_BoneSkin_Function + 0x1717) - 4);
		*(DWORD*)(MainFunction_BoneSkin_Script + 0x1726) = (DWORD)(Vector3_Height - (MainFunction_BoneSkin_Function + 0x1726) - 4);
		*(DWORD*)(MainFunction_BoneSkin_Script + 0x1735) = (DWORD)(Vector3_Height - (MainFunction_BoneSkin_Function + 0x1735) - 4);
		*(DWORD*)(MainFunction_BoneSkin_Script + 0x1744) = (DWORD)(Vector3_Height - (MainFunction_BoneSkin_Function + 0x1744) - 4);
		*(DWORD*)(MainFunction_BoneSkin_Script + 0x1753) = (DWORD)(Vector3_Height - (MainFunction_BoneSkin_Function + 0x1753) - 4);
		*(DWORD*)(MainFunction_BoneSkin_Script + 0x1762) = (DWORD)(Vector3_Height - (MainFunction_BoneSkin_Function + 0x1762) - 4);
		*(DWORD*)(MainFunction_BoneSkin_Script + 0x1771) = (DWORD)(Vector3_Height - (MainFunction_BoneSkin_Function + 0x1771) - 4);
		*(DWORD*)(MainFunction_BoneSkin_Script + 0x1780) = (DWORD)(Vector3_Height - (MainFunction_BoneSkin_Function + 0x1780) - 4);
		*(DWORD*)(MainFunction_BoneSkin_Script + 0x178F) = (DWORD)(Vector3_Height - (MainFunction_BoneSkin_Function + 0x178F) - 4);
		*(DWORD*)(MainFunction_BoneSkin_Script + 0x179E) = (DWORD)(Vector3_Height - (MainFunction_BoneSkin_Function + 0x179E) - 4);
		*(DWORD*)(MainFunction_BoneSkin_Script + 0x17AD) = (DWORD)(Vector3_Height - (MainFunction_BoneSkin_Function + 0x17AD) - 4);
		*(DWORD*)(MainFunction_BoneSkin_Script + 0x17BC) = (DWORD)(Vector3_Height - (MainFunction_BoneSkin_Function + 0x17BC) - 4);
		*(DWORD*)(MainFunction_BoneSkin_Script + 0x17CB) = (DWORD)(Vector3_Height - (MainFunction_BoneSkin_Function + 0x17CB) - 4);
		*(DWORD*)(MainFunction_BoneSkin_Script + 0x17DA) = (DWORD)(Vector3_Height - (MainFunction_BoneSkin_Function + 0x17DA) - 4);
		*(DWORD*)(MainFunction_BoneSkin_Script + 0x17E9) = (DWORD)(Vector3_Height - (MainFunction_BoneSkin_Function + 0x17E9) - 4);
		*(DWORD*)(MainFunction_BoneSkin_Script + 0x17F8) = (DWORD)(Vector3_Height - (MainFunction_BoneSkin_Function + 0x17F8) - 4);
		*(DWORD*)(MainFunction_BoneSkin_Script + 0x1807) = (DWORD)(Vector3_Height - (MainFunction_BoneSkin_Function + 0x1807) - 4);
		*(DWORD*)(MainFunction_BoneSkin_Script + 0x1816) = (DWORD)(Vector3_Height - (MainFunction_BoneSkin_Function + 0x1816) - 4);




		WriteProcessMemory(MODULE->hProcess, LPVOID(MainFunction_BoneSkin_Function), MainFunction_BoneSkin_Script, sizeof(MainFunction_BoneSkin_Script), NULL);

		MODULE->WPM<float>(MainFunction_Filter, 0.01f);
		MODULE->WPM<float>(HumanizeScore, 1.0f);
		MODULE->WPM<float>(HumanizeScore + 0x4, 1.0f);
		MODULE->WPM<float>(HumanizeScore + 0x8, 1.0f);
		MODULE->WPM<float>(Fov_Aimbot, 0.054f);
		MODULE->WPM<float>(Fov_Trigger, 0.006f);
		MODULE->WPM<float>(Vector3_Height + 0x4, 2.0f);
		MODULE->WPM<float>(Vector3_Height_Multiple + 0x4, 1.0f);
		MODULE->WPM<float>(MainFunction_Velocity_Check, 0.10f);
		MODULE->WPM<float>(MainFunction_Prediction_SwitchDistance, 8.0f);
		MODULE->WPM<BYTE>(MouseFunction_Y_Axis, 0x0);
		MODULE->WPM<BYTE>(BorderLineFunction_Switch, 0x0);
		MODULE->WPM<float>(MainFunction_Prediction_Aim, 24.0f);
		MODULE->WPM<float>(MainFunction_Prediction_Aim + 0x4, 12.0f);
		MODULE->WPM<float>(MainFunction_Prediction_Aim + 0x8, 24.0f);

		USEAs = true;
		VMProtectEnd();
	}


	void Shagus2()
	{
		VMProtectBeginUltra("Shagnus2");
		GUIDAlloc = (DWORD64)VirtualAlloc(NULL, 0x200, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
		GetGUID = (DWORD64)VirtualAlloc(NULL, 0x8, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);

		BYTE GUID_Script[] =
		{
			0x57,
			0x49, 0x8B, 0xFE,
			0x48, 0x89, 0x3D, 0xF5, 0x01, 0x00, 0x00,//Function Alloc // GUIDAlloc ÀÌ ¿©±â¿¡ µé¾î°¡¾ßÇÔ 0x3D, 0xF5, 0x01, 0x00, 0x00
			0x5F,
			0x83, 0xF8, 0xFF,
			0x74, 0x09,//je exit
			0x90, 0x90, 0x90, 0x90,
			0x8B, 0xF0, 0x45, 0x33, 0xF6, 0x4D, 0x8B, 0xC6, 0x8B, 0xD6, 0x49, 0x8B, 0xCF,
			0xFF, 0x25, 0x00, 0x00, 0x00, 0x00, 0x25, 0x00, 0x61, 0x9B, 0xF6, 0x7F, 0x00, 0x00//jmp 6A0025 - 0x28
		};

		*(DWORD*)(GUID_Script + 0x7) = (DWORD)(GetGUID - (GUIDAlloc + 0x7) - 4);
		*(DWORD64*)(GUID_Script + 0x28) = MODULE->BaseAddress + offset::GUIDHook + 0x12;

		WriteProcessMemory(MODULE->hProcess, LPVOID(GUIDAlloc), GUID_Script, sizeof(GUID_Script), NULL);
		VMProtectEnd();
	}

	void CharacterGUID(DWORD64 ChampionGUID)
	{
		VMProtectBeginUltra("Characteric GUID Set");
		TCHAR GetFOV[MAX_PATH] = { 0, };
		TCHAR GetTriggerFOV[MAX_PATH] = { 0, };
		TCHAR GetHeight[MAX_PATH] = { 0, };
		TCHAR GetHumanize[MAX_PATH] = { 0, };
		TCHAR IsPrediction[MAX_PATH] = { 0, };
		TCHAR GetPredictionAim[MAX_PATH] = { 0, };
		TCHAR GetPredictionDistance[MAX_PATH] = { 0, };
		TCHAR GetGlowSwitch[MAX_PATH] = { 0, };
		TCHAR GetY_Axis[MAX_PATH] = { 0, };


		switch (ChampionGUID)
		{
		case 0x2E0000000000029:
			GetPrivateProfileStringA("GENJI", "FoV", "", GetFOV, MAX_PATH, "C:\\Settings\\GENJI.ini");
			GetPrivateProfileStringA("GENJI", "FOV2", "", GetTriggerFOV, MAX_PATH, "C:\\Settings\\GENJI.ini");
			GetPrivateProfileStringA("GENJI", "Y", "", GetHeight, MAX_PATH, "C:\\Settings\\GENJI.ini");
			GetPrivateProfileStringA("GENJI", "Smooth", "", GetHumanize, MAX_PATH, "C:\\Settings\\GENJI.ini");
			GetPrivateProfileStringA("GENJI", "Prediction On/Off", "", IsPrediction, MAX_PATH, "C:\\Settings\\GENJI.ini");
			GetPrivateProfileStringA("GENJI", "Prediction Aim", "", GetPredictionAim, MAX_PATH, "C:\\Settings\\GENJI.ini");
			GetPrivateProfileStringA("GENJI", "Edge On/Off", "", GetGlowSwitch, MAX_PATH, "C:\\Settings\\GENJI.ini");
			GetPrivateProfileStringA("GENJI", "Axis On/Off", "", GetY_Axis, MAX_PATH, "C:\\Settings\\GENJI.ini");
			break;

		case 0x2E000000000012F:
			GetPrivateProfileStringA("DOOMFIST", "FoV", "", GetFOV, MAX_PATH, "C:\\Settings\\DOOMFIST.ini");
			GetPrivateProfileStringA("DOOMFIST", "FOV2", "", GetTriggerFOV, MAX_PATH, "C:\\Settings\\DOOMFIST.ini");
			GetPrivateProfileStringA("DOOMFIST", "Y", "", GetHeight, MAX_PATH, "C:\\Settings\\DOOMFIST.ini");
			GetPrivateProfileStringA("DOOMFIST", "Smooth", "", GetHumanize, MAX_PATH, "C:\\Settings\\DOOMFIST.ini");
			GetPrivateProfileStringA("DOOMFIST", "Prediction On/Off", "", IsPrediction, MAX_PATH, "C:\\Settings\\DOOMFIST.ini");
			GetPrivateProfileStringA("DOOMFIST", "Prediction Aim", "", GetPredictionAim, MAX_PATH, "C:\\Settings\\DOOMFIST.ini");
			GetPrivateProfileStringA("DOOMFIST", "Edge On/Off", "", GetGlowSwitch, MAX_PATH, "C:\\Settings\\DOOMFIST.ini");
			GetPrivateProfileStringA("DOOMFIST", "Axis On/Off", "", GetY_Axis, MAX_PATH, "C:\\Settings\\DOOMFIST.ini");
			break;

		case 0x2E0000000000042:
			GetPrivateProfileStringA("McCree", "FoV", "", GetFOV, MAX_PATH, "C:\\Settings\\McCree.ini");
			GetPrivateProfileStringA("McCree", "FOV2", "", GetTriggerFOV, MAX_PATH, "C:\\Settings\\McCree.ini");
			GetPrivateProfileStringA("McCree", "Y", "", GetHeight, MAX_PATH, "C:\\Settings\\McCree.ini");
			GetPrivateProfileStringA("McCree", "Smooth", "", GetHumanize, MAX_PATH, "C:\\Settings\\McCree.ini");
			GetPrivateProfileStringA("McCree", "Prediction On/Off", "", IsPrediction, MAX_PATH, "C:\\Settings\\McCree.ini");
			GetPrivateProfileStringA("McCree", "Prediction Aim", "", GetPredictionAim, MAX_PATH, "C:\\Settings\\McCree.ini");
			GetPrivateProfileStringA("McCree", "Edge On/Off", "", GetGlowSwitch, MAX_PATH, "C:\\Settings\\McCree.ini");
			GetPrivateProfileStringA("McCree", "Axis On/Off", "", GetY_Axis, MAX_PATH, "C:\\Settings\\McCree.ini");
			break;


		case 0x2E0000000000008:
			GetPrivateProfileStringA("PHARAH", "FoV", "", GetFOV, MAX_PATH, "C:\\Settings\\PHARAH.ini");
			GetPrivateProfileStringA("PHARAH", "FOV2", "", GetTriggerFOV, MAX_PATH, "C:\\Settings\\PHARAH.ini");
			GetPrivateProfileStringA("PHARAH", "Y", "", GetHeight, MAX_PATH, "C:\\Settings\\PHARAH.ini");
			GetPrivateProfileStringA("PHARAH", "Smooth", "", GetHumanize, MAX_PATH, "C:\\Settings\\PHARAH.ini");
			GetPrivateProfileStringA("PHARAH", "Prediction On/Off", "", IsPrediction, MAX_PATH, "C:\\Settings\\PHARAH.ini");
			GetPrivateProfileStringA("PHARAH", "Prediction Aim", "", GetPredictionAim, MAX_PATH, "C:\\Settings\\PHARAH.ini");
			GetPrivateProfileStringA("PHARAH", "Edge On/Off", "", GetGlowSwitch, MAX_PATH, "C:\\Settings\\PHARAH.ini");
			GetPrivateProfileStringA("PHARAH", "Axis On/Off", "", GetY_Axis, MAX_PATH, "C:\\Settings\\PHARAH.ini");
			break;

		case 0x2E0000000000002:
			GetPrivateProfileStringA("REAPER", "FoV", "", GetFOV, MAX_PATH, "C:\\Settings\\REAPER.ini");
			GetPrivateProfileStringA("REAPER", "FOV2", "", GetTriggerFOV, MAX_PATH, "C:\\Settings\\REAPER.ini");
			GetPrivateProfileStringA("REAPER", "Y", "", GetHeight, MAX_PATH, "C:\\Settings\\REAPER.ini");
			GetPrivateProfileStringA("REAPER", "Smooth", "", GetHumanize, MAX_PATH, "C:\\Settings\\REAPER.ini");
			GetPrivateProfileStringA("REAPER", "Prediction On/Off", "", IsPrediction, MAX_PATH, "C:\\Settings\\REAPER.ini");
			GetPrivateProfileStringA("REAPER", "Prediction Aim", "", GetPredictionAim, MAX_PATH, "C:\\Settings\\REAPER.ini");
			GetPrivateProfileStringA("REAPER", "Edge On/Off", "", GetGlowSwitch, MAX_PATH, "C:\\Settings\\REAPER.ini");
			GetPrivateProfileStringA("REAPER", "Axis On/Off", "", GetY_Axis, MAX_PATH, "C:\\Settings\\REAPER.ini");

			break;

		case 0x2E000000000006E:
			GetPrivateProfileStringA("SOLIDIER", "FoV", "", GetFOV, MAX_PATH, "C:\\Settings\\SOLIDIER.ini");
			GetPrivateProfileStringA("SOLIDIER", "FOV2", "", GetTriggerFOV, MAX_PATH, "C:\\Settings\\SOLIDIER.ini");
			GetPrivateProfileStringA("SOLIDIER", "Y", "", GetHeight, MAX_PATH, "C:\\Settings\\SOLIDIER.ini");
			GetPrivateProfileStringA("SOLIDIER", "Smooth", "", GetHumanize, MAX_PATH, "C:\\Settings\\SOLIDIER.ini");
			GetPrivateProfileStringA("SOLIDIER", "Prediction On/Off", "", IsPrediction, MAX_PATH, "C:\\Settings\\SOLIDIER.ini");
			GetPrivateProfileStringA("SOLIDIER", "Prediction Aim", "", GetPredictionAim, MAX_PATH, "C:\\Settings\\SOLIDIER.ini");
			GetPrivateProfileStringA("SOLIDIER", "Edge On/Off", "", GetGlowSwitch, MAX_PATH, "C:\\Settings\\SOLIDIER.ini");
			GetPrivateProfileStringA("SOLIDIER", "Axis On/Off", "", GetY_Axis, MAX_PATH, "C:\\Settings\\SOLIDIER.ini");
			break;

		case 0x2E000000000012E:
			GetPrivateProfileStringA("SOMBRA", "FoV", "", GetFOV, MAX_PATH, "C:\\Settings\\SOMBRA.ini");
			GetPrivateProfileStringA("SOMBRA", "FOV2", "", GetTriggerFOV, MAX_PATH, "C:\\Settings\\SOMBRA.ini");
			GetPrivateProfileStringA("SOMBRA", "Y", "", GetHeight, MAX_PATH, "C:\\Settings\\SOMBRA.ini");
			GetPrivateProfileStringA("SOMBRA", "Smooth", "", GetHumanize, MAX_PATH, "C:\\Settings\\SOMBRA.ini");
			GetPrivateProfileStringA("SOMBRA", "Prediction On/Off", "", IsPrediction, MAX_PATH, "C:\\Settings\\SOMBRA.ini");
			GetPrivateProfileStringA("SOMBRA", "Prediction Aim", "", GetPredictionAim, MAX_PATH, "C:\\Settings\\SOMBRA.ini");
			GetPrivateProfileStringA("SOMBRA", "Edge On/Off", "", GetGlowSwitch, MAX_PATH, "C:\\Settings\\SOMBRA.ini");
			GetPrivateProfileStringA("SOMBRA", "Axis On/Off", "", GetY_Axis, MAX_PATH, "C:\\Settings\\SOMBRA.ini");
			break;

		case 0x2E0000000000003:
			GetPrivateProfileStringA("TRACER", "FoV", "", GetFOV, MAX_PATH, "C:\\Settings\\TRACER.ini");
			GetPrivateProfileStringA("TRACER", "FOV2", "", GetTriggerFOV, MAX_PATH, "C:\\Settings\\TRACER.ini");
			GetPrivateProfileStringA("TRACER", "Y", "", GetHeight, MAX_PATH, "C:\\Settings\\TRACER.ini");
			GetPrivateProfileStringA("TRACER", "Smooth", "", GetHumanize, MAX_PATH, "C:\\Settings\\TRACER.ini");
			GetPrivateProfileStringA("TRACER", "Prediction On/Off", "", IsPrediction, MAX_PATH, "C:\\Settings\\TRACER.ini");
			GetPrivateProfileStringA("TRACER", "Prediction Aim", "", GetPredictionAim, MAX_PATH, "C:\\Settings\\TRACER.ini");
			GetPrivateProfileStringA("TRACER", "Edge On/Off", "", GetGlowSwitch, MAX_PATH, "C:\\Settings\\TRACER.ini");
			GetPrivateProfileStringA("TRACER", "Axis On/Off", "", GetY_Axis, MAX_PATH, "C:\\Settings\\GENJI.ini");
			break;

		case 0x2E0000000000015:
			GetPrivateProfileStringA("BASTION", "FoV", "", GetFOV, MAX_PATH, "C:\\Settings\\BASTION.ini");
			GetPrivateProfileStringA("BASTION", "FOV2", "", GetTriggerFOV, MAX_PATH, "C:\\Settings\\BASTION.ini");
			GetPrivateProfileStringA("BASTION", "Y", "", GetHeight, MAX_PATH, "C:\\Settings\\BASTION.ini");
			GetPrivateProfileStringA("BASTION", "Smooth", "", GetHumanize, MAX_PATH, "C:\\Settings\\BASTION.ini");
			GetPrivateProfileStringA("BASTION", "Prediction On/Off", "", IsPrediction, MAX_PATH, "C:\\Settings\\BASTION.ini");
			GetPrivateProfileStringA("BASTION", "Prediction Aim", "", GetPredictionAim, MAX_PATH, "C:\\Settings\\BASTION.ini");
			GetPrivateProfileStringA("BASTION", "Edge On/Off", "", GetGlowSwitch, MAX_PATH, "C:\\Settings\\BASTION.ini");
			GetPrivateProfileStringA("BASTION", "Axis On/Off", "", GetY_Axis, MAX_PATH, "C:\\Settings\\BASTION.ini");
			break;

		case 0x2E0000000000005:
			GetPrivateProfileStringA("HANZO", "FoV", "", GetFOV, MAX_PATH, "C:\\Settings\\HANZO.ini");
			GetPrivateProfileStringA("HANZO", "FOV2", "", GetTriggerFOV, MAX_PATH, "C:\\Settings\\HANZO.ini");
			GetPrivateProfileStringA("HANZO", "Y", "", GetHeight, MAX_PATH, "C:\\Settings\\HANZO.ini");
			GetPrivateProfileStringA("HANZO", "Smooth", "", GetHumanize, MAX_PATH, "C:\\Settings\\HANZO.ini");
			GetPrivateProfileStringA("HANZO", "Prediction On/Off", "", IsPrediction, MAX_PATH, "C:\\Settings\\HANZO.ini");
			GetPrivateProfileStringA("HANZO", "Prediction Aim", "", GetPredictionAim, MAX_PATH, "C:\\Settings\\HANZO.ini");
			GetPrivateProfileStringA("HANZO", "Edge On/Off", "", GetGlowSwitch, MAX_PATH, "C:\\Settings\\HANZO.ini");
			GetPrivateProfileStringA("HANZO", "Axis On/Off", "", GetY_Axis, MAX_PATH, "C:\\Settings\\HANZO.ini");
			break;

		case 0x2E0000000000065:
			GetPrivateProfileStringA("JUNKRAT", "FoV", "", GetFOV, MAX_PATH, "C:\\Settings\\JUNKRAT.ini");
			GetPrivateProfileStringA("JUNKRAT", "FOV2", "", GetTriggerFOV, MAX_PATH, "C:\\Settings\\JUNKRAT.ini");
			GetPrivateProfileStringA("JUNKRAT", "Y", "", GetHeight, MAX_PATH, "C:\\Settings\\JUNKRAT.ini");
			GetPrivateProfileStringA("JUNKRAT", "Smooth", "", GetHumanize, MAX_PATH, "C:\\Settings\\JUNKRAT.ini");
			GetPrivateProfileStringA("JUNKRAT", "Prediction On/Off", "", IsPrediction, MAX_PATH, "C:\\Settings\\JUNKRAT.ini");
			GetPrivateProfileStringA("JUNKRAT", "Prediction Aim", "", GetPredictionAim, MAX_PATH, "C:\\Settings\\JUNKRAT.ini");
			GetPrivateProfileStringA("JUNKRAT", "Edge On/Off", "", GetGlowSwitch, MAX_PATH, "C:\\Settings\\JUNKRAT.ini");
			GetPrivateProfileStringA("JUNKRAT", "Axis On/Off", "", GetY_Axis, MAX_PATH, "C:\\Settings\\JUNKRAT.ini");
			break;

		case 0x2E00000000000DD:
			GetPrivateProfileStringA("MEI", "FoV", "", GetFOV, MAX_PATH, "C:\\Settings\\MEI.ini");
			GetPrivateProfileStringA("MEI", "FOV2", "", GetTriggerFOV, MAX_PATH, "C:\\Settings\\MEI.ini");
			GetPrivateProfileStringA("MEI", "Y", "", GetHeight, MAX_PATH, "C:\\Settings\\MEI.ini");
			GetPrivateProfileStringA("MEI", "Smooth", "", GetHumanize, MAX_PATH, "C:\\Settings\\MEI.ini");
			GetPrivateProfileStringA("MEI", "Prediction On/Off", "", IsPrediction, MAX_PATH, "C:\\Settings\\MEI.ini");
			GetPrivateProfileStringA("MEI", "Prediction Aim", "", GetPredictionAim, MAX_PATH, "C:\\Settings\\MEI.ini");
			GetPrivateProfileStringA("MEI", "Edge On/Off", "", GetGlowSwitch, MAX_PATH, "C:\\Settings\\MEI.ini");
			GetPrivateProfileStringA("MEI", "Axis On/Off", "", GetY_Axis, MAX_PATH, "C:\\Settings\\MEI.ini");
			break;

		case 0x2E0000000000006:
			GetPrivateProfileStringA("TORBJORN", "FoV", "", GetFOV, MAX_PATH, "C:\\Settings\\TORBJORN.ini");
			GetPrivateProfileStringA("TORBJORN", "FOV2", "", GetTriggerFOV, MAX_PATH, "C:\\Settings\\TORBJORN.ini");
			GetPrivateProfileStringA("TORBJORN", "Y", "", GetHeight, MAX_PATH, "C:\\Settings\\TORBJORN.ini");
			GetPrivateProfileStringA("TORBJORN", "Smooth", "", GetHumanize, MAX_PATH, "C:\\Settings\\TORBJORN.ini");
			GetPrivateProfileStringA("TORBJORN", "Prediction On/Off", "", IsPrediction, MAX_PATH, "C:\\Settings\\TORBJORN.ini");
			GetPrivateProfileStringA("TORBJORN", "Prediction Aim", "", GetPredictionAim, MAX_PATH, "C:\\Settings\\TORBJORN.ini");
			GetPrivateProfileStringA("TORBJORN", "Edge On/Off", "", GetGlowSwitch, MAX_PATH, "C:\\Settings\\TORBJORN.ini");
			GetPrivateProfileStringA("TORBJORN", "Axis On/Off", "", GetY_Axis, MAX_PATH, "C:\\Settings\\TORBJORN.ini");
			break;

		case 0x2E000000000000A:
			GetPrivateProfileStringA("WIDOWMAKER", "FoV", "", GetFOV, MAX_PATH, "C:\\Settings\\WIDOWMAKER.ini");
			GetPrivateProfileStringA("WIDOWMAKER", "FOV2", "", GetTriggerFOV, MAX_PATH, "C:\\Settings\\WIDOWMAKER.ini");
			GetPrivateProfileStringA("WIDOWMAKER", "Y", "", GetHeight, MAX_PATH, "C:\\Settings\\WIDOWMAKER.ini");
			GetPrivateProfileStringA("WIDOWMAKER", "Smooth", "", GetHumanize, MAX_PATH, "C:\\Settings\\WIDOWMAKER.ini");
			GetPrivateProfileStringA("WIDOWMAKER", "Prediction On/Off", "", IsPrediction, MAX_PATH, "C:\\Settings\\WIDOWMAKER.ini");
			GetPrivateProfileStringA("WIDOWMAKER", "Prediction Aim", "", GetPredictionAim, MAX_PATH, "C:\\Settings\\WIDOWMAKER.ini");
			GetPrivateProfileStringA("WIDOWMAKER", "Edge On/Off", "", GetGlowSwitch, MAX_PATH, "C:\\Settings\\WIDOWMAKER.ini");
			GetPrivateProfileStringA("WIDOWMAKER", "Axis On/Off", "", GetY_Axis, MAX_PATH, "C:\\Settings\\WIDOWMAKER.ini");
			break;

		case 0x2E000000000007A:
			GetPrivateProfileStringA("D.VA", "FoV", "", GetFOV, MAX_PATH, "C:\\Settings\\D.VA.ini");
			GetPrivateProfileStringA("D.VA", "FOV2", "", GetTriggerFOV, MAX_PATH, "C:\\Settings\\D.VA.ini");
			GetPrivateProfileStringA("D.VA", "Y", "", GetHeight, MAX_PATH, "C:\\Settings\\D.VA.ini");
			GetPrivateProfileStringA("D.VA", "Smooth", "", GetHumanize, MAX_PATH, "C:\\Settings\\D.VA.ini");
			GetPrivateProfileStringA("D.VA", "Prediction On/Off", "", IsPrediction, MAX_PATH, "C:\\Settings\\D.VA.ini");
			GetPrivateProfileStringA("D.VA", "Prediction Aim", "", GetPredictionAim, MAX_PATH, "C:\\Settings\\D.VA.ini");
			GetPrivateProfileStringA("D.VA", "Edge On/Off", "", GetGlowSwitch, MAX_PATH, "C:\\Settings\\D.VA.ini");
			GetPrivateProfileStringA("D.VA", "Axis On/Off", "", GetY_Axis, MAX_PATH, "C:\\Settings\\D.VA.ini");
			break;

		case 0x2E000000000013E:
			GetPrivateProfileStringA("ORISA", "FoV", "", GetFOV, MAX_PATH, "C:\\Settings\\ORISA.ini");
			GetPrivateProfileStringA("ORISA", "FOV2", "", GetTriggerFOV, MAX_PATH, "C:\\Settings\\ORISA.ini");
			GetPrivateProfileStringA("ORISA", "Y", "", GetHeight, MAX_PATH, "C:\\Settings\\ORISA.ini");
			GetPrivateProfileStringA("ORISA", "Smooth", "", GetHumanize, MAX_PATH, "C:\\Settings\\ORISA.ini");
			GetPrivateProfileStringA("ORISA", "Prediction On/Off", "", IsPrediction, MAX_PATH, "C:\\Settings\\ORISA.ini");
			GetPrivateProfileStringA("ORISA", "Prediction Aim", "", GetPredictionAim, MAX_PATH, "C:\\Settings\\ORISA.ini");
			GetPrivateProfileStringA("ORISA", "Edge On/Off", "", GetGlowSwitch, MAX_PATH, "C:\\Settings\\ORISA.ini");
			GetPrivateProfileStringA("ORISA", "Axis On/Off", "", GetY_Axis, MAX_PATH, "C:\\Settings\\ORISA.ini");
			break;

		case 0x2E0000000000007:
			GetPrivateProfileStringA("REINHARDT", "FoV", "", GetFOV, MAX_PATH, "C:\\Settings\\REINHARDT.ini");
			GetPrivateProfileStringA("REINHARDT", "FOV2", "", GetTriggerFOV, MAX_PATH, "C:\\Settings\\REINHARDT.ini");
			GetPrivateProfileStringA("REINHARDT", "Y", "", GetHeight, MAX_PATH, "C:\\Settings\\REINHARDT.ini");
			GetPrivateProfileStringA("REINHARDT", "Smooth", "", GetHumanize, MAX_PATH, "C:\\Settings\\REINHARDT.ini");
			GetPrivateProfileStringA("REINHARDT", "Prediction On/Off", "", IsPrediction, MAX_PATH, "C:\\Settings\\REINHARDT.ini");
			GetPrivateProfileStringA("REINHARDT", "Prediction Aim", "", GetPredictionAim, MAX_PATH, "C:\\Settings\\REINHARDT.ini");
			GetPrivateProfileStringA("REINHARDT", "Edge On/Off", "", GetGlowSwitch, MAX_PATH, "C:\\Settings\\REINHARDT.ini");
			GetPrivateProfileStringA("REINHARDT", "Axis On/Off", "", GetY_Axis, MAX_PATH, "C:\\Settings\\REINHARDT.ini");
			break;

		case 0x2E0000000000040:
			GetPrivateProfileStringA("ROADHOG", "FoV", "", GetFOV, MAX_PATH, "C:\\Settings\\ROADHOG.ini");
			GetPrivateProfileStringA("ROADHOG", "FOV2", "", GetTriggerFOV, MAX_PATH, "C:\\Settings\\ROADHOG.ini");
			GetPrivateProfileStringA("ROADHOG", "Y", "", GetHeight, MAX_PATH, "C:\\Settings\\ROADHOG.ini");
			GetPrivateProfileStringA("ROADHOG", "Smooth", "", GetHumanize, MAX_PATH, "C:\\Settings\\ROADHOG.ini");
			GetPrivateProfileStringA("ROADHOG", "Prediction On/Off", "", IsPrediction, MAX_PATH, "C:\\Settings\\ROADHOG.ini");
			GetPrivateProfileStringA("ROADHOG", "Prediction Aim", "", GetPredictionAim, MAX_PATH, "C:\\Settings\\ROADHOG.ini");
			GetPrivateProfileStringA("ROADHOG", "Edge On/Off", "", GetGlowSwitch, MAX_PATH, "C:\\Settings\\ROADHOG.ini");
			GetPrivateProfileStringA("ROADHOG", "Axis On/Off", "", GetY_Axis, MAX_PATH, "C:\\Settings\\ROADHOG.ini");
			break;

		case 0x2E0000000000009:
			GetPrivateProfileStringA("WINSTON", "FoV", "", GetFOV, MAX_PATH, "C:\\Settings\\WINSTON.ini");
			GetPrivateProfileStringA("WINSTON", "FOV2", "", GetTriggerFOV, MAX_PATH, "C:\\Settings\\WINSTON.ini");
			GetPrivateProfileStringA("WINSTON", "Y", "", GetHeight, MAX_PATH, "C:\\Settings\\WINSTON.ini");
			GetPrivateProfileStringA("WINSTON", "Smooth", "", GetHumanize, MAX_PATH, "C:\\Settings\\WINSTON.ini");
			GetPrivateProfileStringA("WINSTON", "Prediction On/Off", "", IsPrediction, MAX_PATH, "C:\\Settings\\WINSTON.ini");
			GetPrivateProfileStringA("WINSTON", "Prediction Aim", "", GetPredictionAim, MAX_PATH, "C:\\Settings\\WINSTON.ini");
			GetPrivateProfileStringA("WINSTON", "Edge On/Off", "", GetGlowSwitch, MAX_PATH, "C:\\Settings\\WINSTON.ini");
			GetPrivateProfileStringA("WINSTON", "Axis On/Off", "", GetY_Axis, MAX_PATH, "C:\\Settings\\WINSTON.ini");
			break;

		case 0x2E0000000000068:
			GetPrivateProfileStringA("ZARYA", "FoV", "", GetFOV, MAX_PATH, "C:\\Settings\\ZARYA.ini");
			GetPrivateProfileStringA("ZARYA", "FOV2", "", GetTriggerFOV, MAX_PATH, "C:\\Settings\\ZARYA.ini");
			GetPrivateProfileStringA("ZARYA", "Y", "", GetHeight, MAX_PATH, "C:\\Settings\\ZARYA.ini");
			GetPrivateProfileStringA("ZARYA", "Smooth", "", GetHumanize, MAX_PATH, "C:\\Settings\\ZARYA.ini");
			GetPrivateProfileStringA("ZARYA", "Prediction On/Off", "", IsPrediction, MAX_PATH, "C:\\Settings\\ZARYA.ini");
			GetPrivateProfileStringA("ZARYA", "Prediction Aim", "", GetPredictionAim, MAX_PATH, "C:\\Settings\\ZARYA.ini");
			GetPrivateProfileStringA("ZARYA", "Edge On/Off", "", GetGlowSwitch, MAX_PATH, "C:\\Settings\\ZARYA.ini");
			GetPrivateProfileStringA("GENJI", "Axis On/Off", "", GetY_Axis, MAX_PATH, "C:\\Settings\\ZARYA.ini");
			break;

		case 0x2E000000000013B:
			GetPrivateProfileStringA("ANA", "FoV", "", GetFOV, MAX_PATH, "C:\\Settings\\ANA.ini");
			GetPrivateProfileStringA("ANA", "FOV2", "", GetTriggerFOV, MAX_PATH, "C:\\Settings\\ANA.ini");
			GetPrivateProfileStringA("ANA", "Y", "", GetHeight, MAX_PATH, "C:\\Settings\\ANA.ini");
			GetPrivateProfileStringA("ANA", "Smooth", "", GetHumanize, MAX_PATH, "C:\\Settings\\ANA.ini");
			GetPrivateProfileStringA("ANA", "Prediction On/Off", "", IsPrediction, MAX_PATH, "C:\\Settings\\ANA.ini");
			GetPrivateProfileStringA("ANA", "Prediction Aim", "", GetPredictionAim, MAX_PATH, "C:\\Settings\\ANA.ini");
			GetPrivateProfileStringA("ANA", "Edge On/Off", "", GetGlowSwitch, MAX_PATH, "C:\\Settings\\ANA.ini");
			GetPrivateProfileStringA("ANA", "Axis On/Off", "", GetY_Axis, MAX_PATH, "C:\\Settings\\ANA.ini");
			break;

		case 0x2E0000000000195:
			GetPrivateProfileStringA("BRIGITTE", "FoV", "", GetFOV, MAX_PATH, "C:\\Settings\\BRIGITTE.ini");
			GetPrivateProfileStringA("BRIGITTE", "FOV2", "", GetTriggerFOV, MAX_PATH, "C:\\Settings\\BRIGITTE.ini");
			GetPrivateProfileStringA("BRIGITTE", "Y", "", GetHeight, MAX_PATH, "C:\\Settings\\BRIGITTE.ini");
			GetPrivateProfileStringA("BRIGITTE", "Smooth", "", GetHumanize, MAX_PATH, "C:\\Settings\\BRIGITTE.ini");
			GetPrivateProfileStringA("BRIGITTE", "Prediction On/Off", "", IsPrediction, MAX_PATH, "C:\\Settings\\BRIGITTE.ini");
			GetPrivateProfileStringA("BRIGITTE", "Prediction Aim", "", GetPredictionAim, MAX_PATH, "C:\\Settings\\BRIGITTE.ini");
			GetPrivateProfileStringA("BRIGITTE", "Edge On/Off", "", GetGlowSwitch, MAX_PATH, "C:\\Settings\\BRIGITTE.ini");
			GetPrivateProfileStringA("BRIGITTE", "Axis On/Off", "", GetY_Axis, MAX_PATH, "C:\\Settings\\BRIGITTE.ini");
			break;


		case 0x2E0000000000079:
			GetPrivateProfileStringA("LUCIO", "FoV", "", GetFOV, MAX_PATH, "C:\\Settings\\LUCIO.ini");
			GetPrivateProfileStringA("LUCIO", "FOV2", "", GetTriggerFOV, MAX_PATH, "C:\\Settings\\LUCIO.ini");
			GetPrivateProfileStringA("LUCIO", "Y", "", GetHeight, MAX_PATH, "C:\\Settings\\LUCIO.ini");
			GetPrivateProfileStringA("LUCIO", "Smooth", "", GetHumanize, MAX_PATH, "C:\\Settings\\LUCIO.ini");
			GetPrivateProfileStringA("LUCIO", "Prediction On/Off", "", IsPrediction, MAX_PATH, "C:\\Settings\\LUCIO.ini");
			GetPrivateProfileStringA("LUCIO", "Prediction Aim", "", GetPredictionAim, MAX_PATH, "C:\\Settings\\LUCIO.ini");
			GetPrivateProfileStringA("LUCIO", "Edge On/Off", "", GetGlowSwitch, MAX_PATH, "C:\\Settings\\LUCIO.ini");
			GetPrivateProfileStringA("LUCIO", "Axis On/Off", "", GetY_Axis, MAX_PATH, "C:\\Settings\\LUCIO.ini");
			break;

		case 0x2E0000000000004:
			GetPrivateProfileStringA("MERCY", "FoV", "", GetFOV, MAX_PATH, "C:\\Settings\\MERCY.ini");
			GetPrivateProfileStringA("MERCY", "FOV2", "", GetTriggerFOV, MAX_PATH, "C:\\Settings\\MERCY.ini");
			GetPrivateProfileStringA("MERCY", "Y", "", GetHeight, MAX_PATH, "C:\\Settings\\MERCY.ini");
			GetPrivateProfileStringA("MERCY", "Smooth", "", GetHumanize, MAX_PATH, "C:\\Settings\\MERCY.ini");
			GetPrivateProfileStringA("MERCY", "Prediction On/Off", "", IsPrediction, MAX_PATH, "C:\\Settings\\MERCY.ini");
			GetPrivateProfileStringA("MERCY", "Prediction Aim", "", GetPredictionAim, MAX_PATH, "C:\\Settings\\MERCY.ini");
			GetPrivateProfileStringA("MERCY", "Edge On/Off", "", GetGlowSwitch, MAX_PATH, "C:\\Settings\\MERCY.ini");
			GetPrivateProfileStringA("MERCY", "Axis On/Off", "", GetY_Axis, MAX_PATH, "C:\\Settings\\MERCY.ini");

			break;

		case 0x2E00000000001A2:
			GetPrivateProfileStringA("MOIRA", "FoV", "", GetFOV, MAX_PATH, "C:\\Settings\\MOIRA.ini");
			GetPrivateProfileStringA("MOIRA", "FOV2", "", GetTriggerFOV, MAX_PATH, "C:\\Settings\\MOIRA.ini");
			GetPrivateProfileStringA("MOIRA", "Y", "", GetHeight, MAX_PATH, "C:\\Settings\\MOIRA.ini");
			GetPrivateProfileStringA("MOIRA", "Smooth", "", GetHumanize, MAX_PATH, "C:\\Settings\\MOIRA.ini");
			GetPrivateProfileStringA("MOIRA", "Prediction On/Off", "", IsPrediction, MAX_PATH, "C:\\Settings\\MOIRA.ini");
			GetPrivateProfileStringA("MOIRA", "Prediction Aim", "", GetPredictionAim, MAX_PATH, "C:\\Settings\\MOIRA.ini");
			GetPrivateProfileStringA("MOIRA", "Edge On/Off", "", GetGlowSwitch, MAX_PATH, "C:\\Settings\\MOIRA.ini");
			GetPrivateProfileStringA("MOIRA", "Axis On/Off", "", GetY_Axis, MAX_PATH, "C:\\Settings\\MOIRA.ini");
			break;

		case 0x2E0000000000016:
			GetPrivateProfileStringA("SYMMETRA", "FoV", "", GetFOV, MAX_PATH, "C:\\Settings\\SYMMETRA.ini");
			GetPrivateProfileStringA("SYMMETRA", "FOV2", "", GetTriggerFOV, MAX_PATH, "C:\\Settings\\SYMMETRA.ini");
			GetPrivateProfileStringA("SYMMETRA", "Y", "", GetHeight, MAX_PATH, "C:\\Settings\\SYMMETRA.ini");
			GetPrivateProfileStringA("SYMMETRA", "Smooth", "", GetHumanize, MAX_PATH, "C:\\Settings\\SYMMETRA.ini");
			GetPrivateProfileStringA("SYMMETRA", "Prediction On/Off", "", IsPrediction, MAX_PATH, "C:\\Settings\\SYMMETRA.ini");
			GetPrivateProfileStringA("SYMMETRA", "Prediction Aim", "", GetPredictionAim, MAX_PATH, "C:\\Settings\\SYMMETRA.ini");
			GetPrivateProfileStringA("SYMMETRA", "Edge On/Off", "", GetGlowSwitch, MAX_PATH, "C:\\Settings\\SYMMETRA.ini");
			GetPrivateProfileStringA("SYMMETRA", "Axis On/Off", "", GetY_Axis, MAX_PATH, "C:\\Settings\\SYMMETRA.ini");
			break;

		case 0x2E0000000000020:
			GetPrivateProfileStringA("ZENYETTA", "FoV", "", GetFOV, MAX_PATH, "C:\\Settings\\ZENYETTA.ini");
			GetPrivateProfileStringA("ZENYETTA", "FOV2", "", GetTriggerFOV, MAX_PATH, "C:\\Settings\\ZENYETTA.ini");
			GetPrivateProfileStringA("ZENYETTA", "Y", "", GetHeight, MAX_PATH, "C:\\Settings\\ZENYETTA.ini");
			GetPrivateProfileStringA("ZENYETTA", "Smooth", "", GetHumanize, MAX_PATH, "C:\\Settings\\ZENYETTA.ini");
			GetPrivateProfileStringA("ZENYETTA", "Prediction On/Off", "", IsPrediction, MAX_PATH, "C:\\Settings\\ZENYETTA.ini");
			GetPrivateProfileStringA("ZENYETTA", "Prediction Aim", "", GetPredictionAim, MAX_PATH, "C:\\Settings\\ZENYETTA.ini");
			GetPrivateProfileStringA("ZENYETTA", "Edge On/Off", "", GetGlowSwitch, MAX_PATH, "C:\\Settings\\ZENYETTA.ini");
			GetPrivateProfileStringA("ZENYETTA", "Axis On/Off", "", GetY_Axis, MAX_PATH, "C:\\Settings\\ZENYETTA.ini");
			break;

		case 0x2E00000000001CA:
			GetPrivateProfileStringA("WRECKINGBALL", "FoV", "", GetFOV, MAX_PATH, "C:\\Settings\\WRECKINGBALL.ini");
			GetPrivateProfileStringA("WRECKINGBALL", "FOV2", "", GetTriggerFOV, MAX_PATH, "C:\\Settings\\WRECKINGBALL.ini");
			GetPrivateProfileStringA("WRECKINGBALL", "Y", "", GetHeight, MAX_PATH, "C:\\Settings\\WRECKINGBALL.ini");
			GetPrivateProfileStringA("WRECKINGBALL", "Smooth", "", GetHumanize, MAX_PATH, "C:\\Settings\\WRECKINGBALL.ini");
			GetPrivateProfileStringA("WRECKINGBALL", "Prediction On/Off", "", IsPrediction, MAX_PATH, "C:\\Settings\\WRECKINGBALL.ini");
			GetPrivateProfileStringA("WRECKINGBALL", "Prediction Aim", "", GetPredictionAim, MAX_PATH, "C:\\Settings\\WRECKINGBALL.ini");
			GetPrivateProfileStringA("WRECKINGBALL", "Edge On/Off", "", GetGlowSwitch, MAX_PATH, "C:\\Settings\\WRECKINGBALL.ini");
			GetPrivateProfileStringA("WRECKINGBALL", "Axis On/Off", "", GetY_Axis, MAX_PATH, "C:\\Settings\\WRECKINGBALL.ini");
			break;

		case 0x2E0000000000200:
			GetPrivateProfileStringA("ASHE", "FoV", "", GetFOV, MAX_PATH, "C:\\Settings\\ASHE.ini");
			GetPrivateProfileStringA("ASHE", "FOV2", "", GetTriggerFOV, MAX_PATH, "C:\\Settings\\ASHE.ini");
			GetPrivateProfileStringA("ASHE", "Y", "", GetHeight, MAX_PATH, "C:\\Settings\\ASHE.ini");
			GetPrivateProfileStringA("ASHE", "Smooth", "", GetHumanize, MAX_PATH, "C:\\Settings\\ASHE.ini");
			GetPrivateProfileStringA("ASHE", "Prediction On/Off", "", IsPrediction, MAX_PATH, "C:\\Settings\\ASHE.ini");
			GetPrivateProfileStringA("ASHE", "Prediction Aim", "", GetPredictionAim, MAX_PATH, "C:\\Settings\\ASHE.ini");
			GetPrivateProfileStringA("ASHE", "Edge On/Off", "", GetGlowSwitch, MAX_PATH, "C:\\Settings\\ASHE.ini");
			GetPrivateProfileStringA("ASHE", "Axis On/Off", "", GetY_Axis, MAX_PATH, "C:\\Settings\\ASHE.ini");
			break;

		case 0x2E0000000000221:
			GetPrivateProfileStringA("BARTIST", "FoV", "", GetFOV, MAX_PATH, "C:\\Settings\\BARTIST.ini");
			GetPrivateProfileStringA("BARTIST", "FOV2", "", GetTriggerFOV, MAX_PATH, "C:\\Settings\\BARTIST.ini");
			GetPrivateProfileStringA("BARTIST", "Y", "", GetHeight, MAX_PATH, "C:\\Settings\\BARTIST.ini");
			GetPrivateProfileStringA("BARTIST", "Smooth", "", GetHumanize, MAX_PATH, "C:\\Settings\\BARTIST.ini");
			GetPrivateProfileStringA("BARTIST", "Prediction On/Off", "", IsPrediction, MAX_PATH, "C:\\Settings\\BARTIST.ini");
			GetPrivateProfileStringA("BARTIST", "Prediction Aim", "", GetPredictionAim, MAX_PATH, "C:\\Settings\\BARTIST.ini");
			GetPrivateProfileStringA("BARTIST", "Edge On/Off", "", GetGlowSwitch, MAX_PATH, "C:\\Settings\\BARTIST.ini");
			GetPrivateProfileStringA("BARTIST", "Axis On/Off", "", GetY_Axis, MAX_PATH, "C:\\Settings\\BARTIST.ini");
			break;
		case 0x2E000000000023B:
			GetPrivateProfileStringA("SIGMA", "FoV", "", GetFOV, MAX_PATH, "C:\\Settings\\SIGMA.ini");
			GetPrivateProfileStringA("SIGMA", "FOV2", "", GetTriggerFOV, MAX_PATH, "C:\\Settings\\SIGMA.ini");
			GetPrivateProfileStringA("SIGMA", "Y", "", GetHeight, MAX_PATH, "C:\\Settings\\SIGMA.ini");
			GetPrivateProfileStringA("SIGMA", "Smooth", "", GetHumanize, MAX_PATH, "C:\\Settings\\SIGMA.ini");
			GetPrivateProfileStringA("SIGMA", "Prediction On/Off", "", IsPrediction, MAX_PATH, "C:\\Settings\\SIGMA.ini");
			GetPrivateProfileStringA("SIGMA", "Prediction Aim", "", GetPredictionAim, MAX_PATH, "C:\\Settings\\SIGMA.ini");
			GetPrivateProfileStringA("SIGMA", "Edge On/Off", "", GetGlowSwitch, MAX_PATH, "C:\\Settings\\SIGMA.ini");
			GetPrivateProfileStringA("SIGMA", "Axis On/Off", "", GetY_Axis, MAX_PATH, "C:\\Settings\\SIGMA.ini");
			break;
		}

		PRESET->SetValue(GetHeight, GetFOV, GetTriggerFOV, GetHumanize, IsPrediction, GetPredictionAim, GetGlowSwitch, GetY_Axis);

		MODULE->WPM<float>(Vector3_Height_Multiple + 0x4, PRESET->Height);
		MODULE->WPM<float>(Fov_Aimbot, PRESET->FOV);
		MODULE->WPM<float>(Fov_Trigger, PRESET->TriggerFov);
		MODULE->WPM<float>(HumanizeScore, PRESET->Humanize);
		MODULE->WPM<float>(HumanizeScore + 0x4, PRESET->Humanize);
		MODULE->WPM<float>(HumanizeScore + 0x8, PRESET->Humanize);
		MODULE->WPM<BYTE>(MouseFunction_Y_Axis, PRESET->Y_Axis_Switch);
		MODULE->WPM<BYTE>(BorderLineFunction_Switch, PRESET->Glow_Switch);
		MODULE->WPM<BYTE>(Prediction_Switch, PRESET->PredictionSwitch);
		MODULE->WPM<float>(MainFunction_Prediction_Aim, PRESET->PredictionAim);
		MODULE->WPM<float>(MainFunction_Prediction_Aim + 0x4, PRESET->PredictionAim / 2);
		MODULE->WPM<float>(MainFunction_Prediction_Aim + 0x8, PRESET->PredictionAim);
		VMProtectEnd();
	}
};
extern UseAssembly* USEASM = new UseAssembly();